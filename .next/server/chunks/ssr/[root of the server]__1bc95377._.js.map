{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["\nimport {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\nimport { config } from 'dotenv';\n\nconfig(); // Ensures .env variables are loaded\n\nconst genkitPlugins = []; // Renamed to avoid conflict with 'plugins' from genkit\nlet apiKeyFound = false;\nlet apiKeyEnvVarName = '';\nlet apiKeyToUse: string | undefined = undefined;\n\nconst geminiApiKey = process.env.GEMINI_API_KEY;\nconst googleApiKey = process.env.GOOGLE_API_KEY;\n\nif (geminiApiKey && geminiApiKey.trim() !== \"\") {\n  apiKeyToUse = geminiApiKey;\n  apiKeyEnvVarName = 'GEMINI_API_KEY';\n  apiKeyFound = true;\n  console.log(`Genkit: Found ${apiKeyEnvVarName}.`);\n} else if (googleApiKey && googleApiKey.trim() !== \"\") {\n  apiKeyToUse = googleApiKey;\n  apiKeyEnvVarName = 'GOOGLE_API_KEY';\n  apiKeyFound = true;\n  console.log(`Genkit: ${apiKeyEnvVarName} found (GEMINI_API_KEY was not).`);\n}\n\nif (apiKeyFound && apiKeyToUse) {\n  try {\n    genkitPlugins.push(googleAI({ apiKey: apiKeyToUse }));\n    console.log(`Genkit: Google AI plugin added to plugins list using ${apiKeyEnvVarName}. Will be initialized by genkit().`);\n  } catch (e: any) {\n    console.error(`Genkit: CRITICAL ERROR preparing Google AI plugin with ${apiKeyEnvVarName}: ${e.message}`, e);\n  }\n} else {\n  console.warn('Genkit: Neither GEMINI_API_KEY nor GOOGLE_API_KEY was found. Google AI plugin will not be configured.');\n}\n\nexport const ai = genkit({\n  plugins: genkitPlugins,\n});\n\n// The previous check using ai.registry.findPlugin has been removed as it was causing a TypeError.\n// If the Google AI plugin was successfully added to genkitPlugins and an API key is valid,\n// Genkit will attempt to use it. Errors during AI operations will indicate any issues.\nif (genkitPlugins.length > 0 && apiKeyFound) {\n    console.log(\"Genkit: Attempting to initialize with Google AI plugin. Subsequent AI call errors will indicate if this failed (e.g., invalid API key, model access issues).\");\n} else if (!apiKeyFound) {\n    console.warn(\"Genkit: Google AI plugin not configured due to missing API key. AI-powered features will use fallbacks or may not be fully functional.\");\n}\n"],"names":[],"mappings":";;;AACA;AAAA;AACA;AAAA;AACA;;;;AAEA,CAAA,GAAA,qIAAA,CAAA,SAAM,AAAD,KAAK,oCAAoC;AAE9C,MAAM,gBAAgB,EAAE,EAAE,uDAAuD;AACjF,IAAI,cAAc;AAClB,IAAI,mBAAmB;AACvB,IAAI,cAAkC;AAEtC,MAAM,eAAe,QAAQ,GAAG,CAAC,cAAc;AAC/C,MAAM,eAAe,QAAQ,GAAG,CAAC,cAAc;AAE/C,IAAI,gBAAgB,aAAa,IAAI,OAAO,IAAI;IAC9C,cAAc;IACd,mBAAmB;IACnB,cAAc;IACd,QAAQ,GAAG,CAAC,CAAC,cAAc,EAAE,iBAAiB,CAAC,CAAC;AAClD,OAAO,IAAI,gBAAgB,aAAa,IAAI,OAAO,IAAI;IACrD,cAAc;IACd,mBAAmB;IACnB,cAAc;IACd,QAAQ,GAAG,CAAC,CAAC,QAAQ,EAAE,iBAAiB,gCAAgC,CAAC;AAC3E;AAEA,IAAI,eAAe,aAAa;IAC9B,IAAI;QACF,cAAc,IAAI,CAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;YAAE,QAAQ;QAAY;QAClD,QAAQ,GAAG,CAAC,CAAC,qDAAqD,EAAE,iBAAiB,kCAAkC,CAAC;IAC1H,EAAE,OAAO,GAAQ;QACf,QAAQ,KAAK,CAAC,CAAC,uDAAuD,EAAE,iBAAiB,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE;IAC5G;AACF,OAAO;IACL,QAAQ,IAAI,CAAC;AACf;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;AACX;AAEA,kGAAkG;AAClG,2FAA2F;AAC3F,uFAAuF;AACvF,IAAI,cAAc,MAAM,GAAG,KAAK,aAAa;IACzC,QAAQ,GAAG,CAAC;AAChB,OAAO,IAAI,CAAC,aAAa;IACrB,QAAQ,IAAI,CAAC;AACjB","debugId":null}},
    {"offset": {"line": 273, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/enhance-medicine-search.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Enhances medicine search functionality by extracting the intended medicine name from potentially misspelled, partial queries, barcodes, or composition keywords.\n *\n * - enhanceMedicineSearch - A function that takes a user's search query and returns a term suitable for backend search.\n * - EnhanceMedicineSearchInput - The input type for the enhanceMedicineSearch function.\n * - EnhanceMedicineSearchOutput - The return type for the enhanceMedicineSearch function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst EnhanceMedicineSearchInputSchema = z.object({\n  query: z.string().describe('The user input query, which may contain misspellings, be incomplete, a barcode, or composition keywords, potentially including dosages.'),\n});\nexport type EnhanceMedicineSearchInput = z.infer<typeof EnhanceMedicineSearchInputSchema>;\n\nconst EnhanceMedicineSearchOutputSchema = z.object({\n  correctedMedicineName: z\n    .string()\n    .describe('The corrected/completed medicine name, barcode, or composition keyword extracted from the query, suitable for backend search. Should retain specific details like dosages if they appear to be part of a product name.'),\n  source: z.enum(['ai_enhanced', 'ai_unavailable', 'ai_failed', 'original_query_used']).optional().describe(\"Indicates the source or status of the correctedMedicineName. 'ai_enhanced' if AI successfully processed. 'ai_unavailable' if AI couldn't be used (e.g. no API key / model issue). 'ai_failed' if AI processing failed. 'original_query_used' if AI was skipped or failed and original query is returned.\"),\n});\nexport type EnhanceMedicineSearchOutput = z.infer<typeof EnhanceMedicineSearchOutputSchema>;\n\nexport async function enhanceMedicineSearch(input: EnhanceMedicineSearchInput): Promise<EnhanceMedicineSearchOutput> {\n  if (!input || typeof input.query !== 'string' || input.query.trim() === '') {\n    console.warn(`enhanceMedicineSearch: Invalid or empty input query. Input: ${JSON.stringify(input)}`);\n    return {\n      correctedMedicineName: input?.query || \"\", \n      source: 'original_query_used', \n    };\n  }\n\n  try {\n    const result = await enhanceMedicineSearchFlow(input);\n    console.log(\"enhanceMedicineSearch (wrapper) - Flow Result:\", JSON.stringify(result, null, 2));\n    if (result.source === 'ai_unavailable') {\n        console.warn(`enhanceMedicineSearch: Flow indicated AI is unavailable (model/key issue). Query: \"${input.query}\"`);\n    }\n    \n    if (!result.correctedMedicineName || result.correctedMedicineName.trim() === '') {\n        console.warn(`enhanceMedicineSearch: AI returned empty correctedMedicineName. Falling back to original query. Input: \"${input.query}\", AI Result: ${JSON.stringify(result)}`);\n        return { correctedMedicineName: input.query, source: 'original_query_used' };\n    }\n    return result;\n  } catch (error: unknown) {\n    let message = \"Unknown error during AI search enhancement.\";\n    let errorDetails = \"\";\n    if (error instanceof Error) {\n      message = error.message;\n      errorDetails = error.stack || String(error);\n    } else if (typeof error === 'string') {\n      message = error;\n      errorDetails = error;\n    } else if (error && typeof error === 'object' && 'message' in error) {\n      message = String((error as any).message);\n      errorDetails = JSON.stringify(error);\n    }\n    console.error(`Critical error in enhanceMedicineSearch wrapper for query \"${input.query}\":`, message, `Details: ${errorDetails}`, error);\n    return { correctedMedicineName: input.query, source: 'ai_failed' };\n  }\n}\n\nconst enhanceMedicineSearchPrompt = ai.definePrompt({\n  name: 'enhanceMedicineSearchPrompt',\n  model: 'googleai/gemini-1.5-flash-latest', // Updated model\n  input: {schema: EnhanceMedicineSearchInputSchema},\n  output: {schema: EnhanceMedicineSearchOutputSchema},\n  prompt: `You are an AI assistant for a medicine search application. Your primary goal is to help identify the medicine the user is looking for.\nThe user query can be a medicine name (possibly misspelled or partial, and may include dosages like \"500mg\"), its barcode, or keywords from its composition.\nBased on the input, determine the most likely *medicine name* or the *original query if it seems to be a direct identifier like a barcode or a specific product formulation that doesn't map to a more general common name*.\nReturn this as \\`correctedMedicineName\\`.\nSet the 'source' field to 'ai_enhanced'.\n\nThe subsequent search will use this \\`correctedMedicineName\\` to look up medicines by name, barcode, or composition.\nIf the query includes dosage or strength (e.g., \"Paracetamol 500mg\", \"Dolo 650\"), and this appears to be part of a specific product name or common way of referring to it, RETAIN these details in \\`correctedMedicineName\\`.\nIf the query is a general description (e.g., \"medicine for headache\"), extract the key medicinal component.\n\nExamples:\n- Query: \"panadol\", correctedMedicineName: \"Panadol\", source: \"ai_enhanced\"\n- Query: \"amoxilin\", correctedMedicineName: \"Amoxicillin\", source: \"ai_enhanced\"\n- Query: \"dolo 650\", correctedMedicineName: \"Dolo 650\", source: \"ai_enhanced\"\n- Query: \"Paracetamol 500mg Tablet\", correctedMedicineName: \"Paracetamol 500mg Tablet\", source: \"ai_enhanced\"\n- Query: \"Aceclofenac 100 mg Paracetamol 325 mg\", correctedMedicineName: \"Aceclofenac 100 mg Paracetamol 325 mg\", source: \"ai_enhanced\"\n- Query: \"Barcode 1234567890123 for Paracetamol\", correctedMedicineName: \"Paracetamol\", source: \"ai_enhanced\"\n- Query: \"1234567890123\" (assume this is a barcode), correctedMedicineName: \"1234567890123\", source: \"ai_enhanced\"\n- Query: \"syrup with paracetamol 500mg\" (descriptive), correctedMedicineName: \"Paracetamol\", source: \"ai_enhanced\"\n- Query: \"medicine for headache with ibuprofen\", correctedMedicineName: \"Ibuprofen\", source: \"ai_enhanced\"\n\nIf the input is a barcode, and you cannot confidently map it to a common medicine name, return the barcode itself.\nIf the input is a composition keyword (e.g. \"Paracetamol\"), return it or a slightly refined version.\nThe key is to provide a search term that will be effective for the backend, preserving specificity when it seems intentional.\nAlways set 'source' to 'ai_enhanced' in your direct response. Do not return empty strings for correctedMedicineName; if unsure, return the original query.\n\nUser Query: {{{query}}}\n  `,\n});\n\nconst enhanceMedicineSearchFlow = ai.defineFlow(\n  {\n    name: 'enhanceMedicineSearchFlow',\n    inputSchema: EnhanceMedicineSearchInputSchema,\n    outputSchema: EnhanceMedicineSearchOutputSchema,\n  },\n  async (input: EnhanceMedicineSearchInput): Promise<EnhanceMedicineSearchOutput> => {\n    let rawOutputFromAI: EnhanceMedicineSearchOutput | null = null;\n    try {\n      const {output} = await enhanceMedicineSearchPrompt(input);\n      rawOutputFromAI = output;\n      console.log(\"enhanceMedicineSearchFlow - Raw AI Output:\", JSON.stringify(rawOutputFromAI, null, 2));\n\n      if (!rawOutputFromAI ||\n          typeof rawOutputFromAI.correctedMedicineName !== 'string' ||\n          rawOutputFromAI.correctedMedicineName.trim() === '' || \n          (rawOutputFromAI.source && !['ai_enhanced', 'ai_unavailable', 'ai_failed', 'original_query_used'].includes(rawOutputFromAI.source)) \n        ) {\n        console.warn(\n            \"enhanceMedicineSearchFlow: AI returned invalid structure, empty correctedMedicineName, or invalid source. Input:\",\n            JSON.stringify(input, null, 2),\n            \"Raw Output:\",\n            JSON.stringify(rawOutputFromAI, null, 2)\n        );\n        return { correctedMedicineName: input.query, source: 'original_query_used' };\n      }\n      \n      return { \n        correctedMedicineName: rawOutputFromAI.correctedMedicineName,\n        source: rawOutputFromAI.source || 'ai_enhanced' \n      };\n\n    } catch (flowError: unknown) {\n      let errorMessage = \"AI model failed to process search enhancement or an unexpected error occurred.\";\n      let errorStack: string | undefined;\n\n      if (flowError instanceof Error) {\n          errorMessage = flowError.message;\n          errorStack = flowError.stack;\n\n          if (errorMessage.includes('API key not valid') || errorMessage.includes('User location is not supported') || errorMessage.includes('API_KEY_INVALID') || errorMessage.includes('API key is invalid') || errorMessage.includes('permission') || errorMessage.includes('denied')) {\n            console.error(`enhanceMedicineSearchFlow: Probable API key, permission, or configuration issue: ${errorMessage}`);\n            return { correctedMedicineName: input.query, source: 'ai_unavailable' };\n          }\n          if (errorMessage.includes('model not found') || errorMessage.includes('Could not find model') || errorMessage.includes('404 Not Found')) {\n            console.error(`enhanceMedicineSearchFlow: AI model not found or configured: ${errorMessage}`);\n            return { correctedMedicineName: input.query, source: 'ai_unavailable' };\n          }\n          if (errorMessage.includes('Billing account not found') || errorMessage.includes('billing issues')) {\n            console.error(`enhanceMedicineSearchFlow: Billing issue: ${errorMessage}`);\n            return { correctedMedicineName: input.query, source: 'ai_unavailable' };\n          }\n      } else if (typeof flowError === 'string') {\n          errorMessage = flowError;\n      } else if (flowError && typeof flowError === 'object' && 'message' in flowError) {\n          errorMessage = String((flowError as any).message);\n      }\n\n      console.error(`enhanceMedicineSearchFlow: Error for input ${JSON.stringify(input)} - Message: ${errorMessage}${errorStack ? `\\nStack: ${errorStack}` : ''}\\nRaw AI Output (if available): ${JSON.stringify(rawOutputFromAI, null, 2)}\\nOriginal Error Object:`, flowError);\n      return { correctedMedicineName: input.query, source: 'ai_failed' };\n    }\n  }\n);\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 460, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/translations.ts"],"sourcesContent":["\nimport type { Language } from '@/types';\n\nexport type TranslationKeys = {\n  appName: string;\n  searchTitle: string;\n  searchPlaceholder: string;\n  searchButton: string;\n  languageLabel: string;\n  english: string;\n  hindi: string;\n  bengali: string;\n  resultsTitle: string;\n  noResults: string;\n  noResultsTitle: string;\n  medicineNameLabel: string;\n  compositionLabel: string;\n  usageLabel: string;\n  manufacturerLabel: string;\n  dosageLabel: string;\n  sideEffectsLabel: string;\n  barcodeLabel: string;\n  loadingAi: string;\n  loadingData: string;\n  loadingAiDetails: string;\n  errorOccurred: string;\n  errorAi: string;\n  errorData: string;\n  errorAiDetails: (itemName: string, source: string) => string;\n  searchWithAiResult: (correctedName: string) => string;\n  clearSearchButton: string;\n  sourceDbAiMessage: string;\n  sourceAiOnlyMessage: string; \n  sourceDbOnlyMessage: string;\n  sourceAiUnavailableForDetailsMessage: (medicineName: string) => string;\n  sourceAiFailedForDetailsMessage: (medicineName: string) => string;\n  barcodeNotAvailable: string;\n  initialHelperText: string;\n  allRightsReserved: string;\n  infoNotAvailable: string;\n  errorAiNotConfiguredOrModelTitle: string;\n  errorAiNotConfiguredOrModel: string;\n  errorAiNotConfiguredOrModelDetail: string;\n  errorAiFailedTitle: string;\n  errorAiFailed: string;\n  errorAiFailedDetail: string;\n  errorAiEnhancementSkipped: string;\n  errorAiModelNotFound: (modelName: string) => string;\n  aiCouldNotEnhance: (itemName: string) => string;\n  errorAiNotConfiguredOrModelForDetails: (itemName: string) => string;\n  errorAiFailedForDetails: (itemName: string) => string;\n  errorAiDetailsCritical: (itemName: string) => string;\n};\n\nexport const translations: Record<Language, TranslationKeys> = {\n  en: {\n    appName: 'WellMeds',\n    searchTitle: 'Search for Medicines',\n    searchPlaceholder: 'Enter medicine name, barcode, or composition...',\n    searchButton: 'Search',\n    languageLabel: 'Language',\n    english: 'English',\n    hindi: 'Hindi',\n    bengali: 'Bengali',\n    resultsTitle: 'Search Result',\n    noResults: 'No medicine found matching your query.',\n    noResultsTitle: 'No Specific Match Found',\n    medicineNameLabel: 'Name',\n    compositionLabel: 'Composition',\n    usageLabel: 'Usage',\n    manufacturerLabel: 'Manufacturer',\n    dosageLabel: 'Dosage',\n    sideEffectsLabel: 'Side Effects',\n    barcodeLabel: 'Barcode',\n    loadingAi: 'Enhancing search with AI...',\n    loadingData: 'Searching database...',\n    loadingAiDetails: 'Generating details with AI...',\n    errorOccurred: 'An Error Occurred',\n    errorAi: 'AI search enhancement failed or was skipped. Using original query.',\n    errorData: 'Failed to fetch medicine data from database.',\n    errorAiDetails: (itemName: string, source: string) => `AI could not generate full details for \"${itemName}\". Status: ${source}. Displaying available data.`,\n    searchWithAiResult: (correctedName: string) => `AI suggested: \"${correctedName}\". Searching with this term.`,\n    clearSearchButton: 'Clear Search',\n    sourceDbAiMessage: 'Details from database, enhanced by AI.',\n    sourceAiOnlyMessage: 'Details primarily AI-generated.',\n    sourceDbOnlyMessage: 'Details from database.',\n    sourceAiUnavailableForDetailsMessage: (medicineName: string) => `AI features for enhancing \"${medicineName}\" details are unavailable due to API key or model issues.`,\n    sourceAiFailedForDetailsMessage: (medicineName: string) => `AI enhancement failed for \"${medicineName}\" details.`,\n    barcodeNotAvailable: 'Not available',\n    initialHelperText: 'Enter a medicine name, barcode, or composition to begin your search.',\n    allRightsReserved: 'All rights reserved.',\n    infoNotAvailable: \"Information not available.\",\n    errorAiNotConfiguredOrModelTitle: \"AI Key/Model Issue\",\n    errorAiNotConfiguredOrModel: \"AI-powered features are currently unavailable due to an issue with the AI configuration (API Key or Model).\",\n    errorAiNotConfiguredOrModelDetail: \"Please ensure the GEMINI_API_KEY is correctly set in your .env file, is valid, has billing enabled, and the specified AI model is accessible. Restart the server after changes.\",\n    errorAiFailedTitle: \"AI Processing Error\",\n    errorAiFailed: \"There was an error while trying to use AI. Some information may be missing or incomplete.\",\n    errorAiFailedDetail: \"Please check your server logs for more specific error details from the AI service. This could be due to network problems or other API issues.\",\n    errorAiEnhancementSkipped: \"AI search enhancement was skipped (possibly due to AI unavailability). Using your original query.\",\n    errorAiModelNotFound: (modelName: string) => `The AI model \"${modelName}\" was not found or is not accessible. Please check the model name and your API key permissions.`,\n    aiCouldNotEnhance: (itemName: string) => `AI could not provide further details for \"${itemName}\" beyond what was found in the database.`,\n    errorAiNotConfiguredOrModelForDetails: (itemName: string) => `AI features for generating details for \"${itemName}\" are unavailable due to API key or model configuration issues.`,\n    errorAiFailedForDetails: (itemName: string) => `AI failed to generate details for \"${itemName}\".`,\n    errorAiDetailsCritical: (itemName: string) => `A critical error occurred while trying to generate AI details for \"${itemName}\". Please check server logs.`,\n  },\n  hi: {\n    appName: 'वेलमेड्स',\n    searchTitle: 'दवाएं खोजें',\n    searchPlaceholder: 'दवा का नाम, बारकोड, या संरचना दर्ज करें...',\n    searchButton: 'खोजें',\n    languageLabel: 'भाषा',\n    english: 'अंग्रेज़ी',\n    hindi: 'हिंदी',\n    bengali: 'बंगाली',\n    resultsTitle: 'खोज परिणाम',\n    noResults: 'आपकी क्वेरी से मेल खाने वाली कोई दवा नहीं मिली।',\n    noResultsTitle: 'कोई विशिष्ट मिलान नहीं मिला',\n    medicineNameLabel: 'नाम',\n    compositionLabel: 'संरचना',\n    usageLabel: 'उपयोग',\n    manufacturerLabel: 'निर्माता',\n    dosageLabel: 'खुराक',\n    sideEffectsLabel: 'दुष्प्रभाव',\n    barcodeLabel: 'बारकोड',\n    loadingAi: 'एआई के साथ खोज को बढ़ाया जा रहा है...',\n    loadingData: 'डेटाबेस में खोजा जा रहा है...',\n    loadingAiDetails: 'एआई द्वारा विवरण तैयार किया जा रहा है...',\n    errorOccurred: 'एक त्रुटि हुई',\n    errorAi: 'एआई खोज वृद्धि विफल रही या छोड़ दी गई। मूल क्वेरी का उपयोग किया जा रहा है।',\n    errorData: 'डेटाबेस से दवा डेटा लाने में विफल।',\n    errorAiDetails: (itemName: string, source: string) => `एआई \"${itemName}\" के लिए पूर्ण विवरण उत्पन्न नहीं कर सका। स्थिति: ${source}। उपलब्ध डेटा प्रदर्शित किया जा रहा है।`,\n    searchWithAiResult: (correctedName: string) => `एआई ने सुझाया: \"${correctedName}\"। इस शब्द के साथ खोज रहे हैं।`,\n    clearSearchButton: 'खोज साफ़ करें',\n    sourceDbAiMessage: 'डेटाबेस से विवरण, एआई द्वारा संवर्धित।',\n    sourceAiOnlyMessage: 'विवरण मुख्य रूप से एआई-जनित।',\n    sourceDbOnlyMessage: 'डेटाबेस से विवरण।',\n    sourceAiUnavailableForDetailsMessage: (medicineName: string) => `\"${medicineName}\" विवरणों को बढ़ाने के लिए एआई सुविधाएँ एपीआई कुंजी या मॉडल समस्याओं के कारण अनुपलब्ध हैं।`,\n    sourceAiFailedForDetailsMessage: (medicineName: string) => `\"${medicineName}\" विवरणों के लिए एआई वृद्धि विफल रही।`,\n    barcodeNotAvailable: 'उपलब्ध नहीं है',\n    initialHelperText: 'अपनी खोज शुरू करने के लिए दवा का नाम, बारकोड या संरचना दर्ज करें।',\n    allRightsReserved: 'सभी अधिकार सुरक्षित।',\n    infoNotAvailable: \"जानकारी उपलब्ध नहीं है।\",\n    errorAiNotConfiguredOrModelTitle: \"एआई कुंजी/मॉडल समस्या\",\n    errorAiNotConfiguredOrModel: \"एआई कॉन्फ़िगरेशन (एपीआई कुंजी या मॉडल) के साथ किसी समस्या के कारण एआई-संचालित सुविधाएँ वर्तमान में अनुपलब्ध हैं।\",\n    errorAiNotConfiguredOrModelDetail: \"कृपया सुनिश्चित करें कि GEMINI_API_KEY आपकी .env फ़ाइल में सही ढंग से सेट है, मान्य है, बिलिंग सक्षम है, और निर्दिष्ट एआई मॉडल पहुंच योग्य है। परिवर्तनों के बाद सर्वर को पुनरारंभ करें।\",\n    errorAiFailedTitle: \"एआई प्रसंस्करण त्रुटि\",\n    errorAiFailed: \"एआई का उपयोग करने का प्रयास करते समय एक त्रुटि हुई। कुछ जानकारी गुम या अधूरी हो सकती है।\",\n    errorAiFailedDetail: \"एआई सेवा से अधिक विशिष्ट त्रुटि विवरण के लिए कृपया अपने सर्वर लॉग की जांच करें। यह नेटवर्क समस्याओं या अन्य एपीआई समस्याओं के कारण हो सकता है।\",\n    errorAiEnhancementSkipped: \"एआई खोज वृद्धि छोड़ दी गई थी (संभवतः एआई अनुपलब्धता के कारण)। आपकी मूल क्वेरी का उपयोग किया जा रहा है।\",\n    errorAiModelNotFound: (modelName: string) => `एआई मॉडल \"${modelName}\" नहीं मिला या पहुंच योग्य नहीं है। कृपया मॉडल का नाम और अपनी एपीआई कुंजी अनुमतियों की जांच करें।`,\n    aiCouldNotEnhance: (itemName: string) => `एआई डेटाबेस में मिली जानकारी के अतिरिक्त \"${itemName}\" के लिए और विवरण प्रदान नहीं कर सका।`,\n    errorAiNotConfiguredOrModelForDetails: (itemName: string) => `एपीआई कुंजी या मॉडल कॉन्फ़िगरेशन समस्याओं के कारण \"${itemName}\" के लिए विवरण उत्पन्न करने के लिए एआई सुविधाएँ अनुपलब्ध हैं।`,\n    errorAiFailedForDetails: (itemName: string) => `एआई \"${itemName}\" के लिए विवरण उत्पन्न करने में विफल रहा।`,\n    errorAiDetailsCritical: (itemName: string) => `\"${itemName}\" के लिए एआई विवरण उत्पन्न करने का प्रयास करते समय एक गंभीर त्रुटि हुई। कृपया सर्वर लॉग जांचें।`,\n  },\n  bn: {\n    appName: 'ওয়েলমেডস',\n    searchTitle: 'ওষুধ অনুসন্ধান করুন',\n    searchPlaceholder: 'ওষুধের নাম, বারকোড, বা গঠন লিখুন...',\n    searchButton: 'অনুসন্ধান',\n    languageLabel: 'ভাষা',\n    english: 'ইংরেজি',\n    hindi: 'হিন্দি',\n    bengali: 'বাংলা',\n    resultsTitle: 'অনুসন্ধানের ফলাফল',\n    noResults: 'আপনার প্রশ্নের সাথে মেলে এমন কোন ওষুধ পাওয়া যায়নি।',\n    noResultsTitle: 'কোন নির্দিষ্ট মিল পাওয়া যায়নি',\n    medicineNameLabel: 'নাম',\n    compositionLabel: 'গঠন',\n    usageLabel: 'ব্যবহার',\n    manufacturerLabel: 'প্রস্তুতকারক',\n    dosageLabel: 'মাত্রা',\n    sideEffectsLabel: 'পার্শ্ব প্রতিক্রিয়া',\n    barcodeLabel: 'বারকোড',\n    loadingAi: 'এআই দিয়ে অনুসন্ধান উন্নত করা হচ্ছে...',\n    loadingData: 'ডাটাবেস অনুসন্ধান করা হচ্ছে...',\n    loadingAiDetails: 'এআই দ্বারা বিস্তারিত তৈরি করা হচ্ছে...',\n    errorOccurred: 'একটি ত্রুটি ঘটেছে',\n    errorAi: 'এআই অনুসন্ধান উন্নতি ব্যর্থ হয়েছে বা এড়িয়ে যাওয়া হয়েছে। মূল কোয়েরি ব্যবহার করা হচ্ছে।',\n    errorData: 'ডাটাবেস থেকে ওষুধের ডেটা আনতে ব্যর্থ হয়েছে।',\n    errorAiDetails: (itemName: string, source: string) => `এআই \"${itemName}\" এর জন্য সম্পূর্ণ বিবরণ তৈরি করতে পারেনি। স্থিতি: ${source}। উপলব্ধ ডেটা দেখানো হচ্ছে।`,\n    searchWithAiResult: (correctedName: string) => `এআই প্রস্তাবিত: \"${correctedName}\"। এই শব্দটি দিয়ে অনুসন্ধান করা হচ্ছে।`,\n    clearSearchButton: 'অনুসন্ধান সাফ করুন',\n    sourceDbAiMessage: 'ডাটাবেস থেকে বিস্তারিত, এআই দ্বারা উন্নত।',\n    sourceAiOnlyMessage: 'বিস্তারিত প্রধানত এআই-জেনারেটেড।',\n    sourceDbOnlyMessage: 'ডাটাবেস থেকে বিস্তারিত।',\n    sourceAiUnavailableForDetailsMessage: (medicineName: string) => `\"${medicineName}\" বিবরণ উন্নত করার জন্য এআই বৈশিষ্ট্যগুলি API কী বা মডেল সমস্যার কারণে অনুপলব্ধ।`,\n    sourceAiFailedForDetailsMessage: (medicineName: string) => `\"${medicineName}\" বিবরণের জন্য এআই উন্নতি ব্যর্থ হয়েছে।`,\n    barcodeNotAvailable: 'উপলব্ধ নয়',\n    initialHelperText: 'আপনার অনুসন্ধান শুরু করতে একটি ওষুধের নাম, বারকোড বা রচনা লিখুন।',\n    allRightsReserved: 'সর্বস্বত্ব সংরক্ষিত।',\n    infoNotAvailable: \"তথ্য উপলব্ধ নেই।\",\n    errorAiNotConfiguredOrModelTitle: \"এআই কী/মডেল সমস্যা\",\n    errorAiNotConfiguredOrModel: \"এআই কনফিগারেশন (এপিআই কী বা মডেল) এর সাথে সমস্যার কারণে এআই-চালিত বৈশিষ্ট্যগুলি বর্তমানে অনুপলব্ধ।\",\n    errorAiNotConfiguredOrModelDetail: \"অনুগ্রহ করে নিশ্চিত করুন যে GEMINI_API_KEY আপনার .env ফাইলে সঠিকভাবে সেট করা আছে, বৈধ, বিলিং সক্ষম করা আছে এবং নির্দিষ্ট AI মডেলটি অ্যাক্সেসযোগ্য। পরিবর্তনের পরে সার্ভারটি পুনরায় চালু করুন।\",\n    errorAiFailedTitle: \"এআই প্রক্রিয়াকরণ ত্রুটি\",\n    errorAiFailed: \"এআই ব্যবহার করার চেষ্টা করার সময় একটি ত্রুটি ঘটেছে। কিছু তথ্য অনুপস্থিত বা অসম্পূর্ণ হতে পারে।\",\n    errorAiFailedDetail: \"এআই পরিষেবা থেকে আরও নির্দিষ্ট ত্রুটির বিবরণের জন্য অনুগ্রহ করে আপনার সার্ভার লগগুলি পরীক্ষা করুন। এটি নেটওয়ার্ক সমস্যা বা অন্যান্য API সমস্যার কারণে হতে পারে।\",\n    errorAiEnhancementSkipped: \"এআই অনুসন্ধান বৃদ্ধি এড়িয়ে যাওয়া হয়েছে (সম্ভবত এআই অনুপলব্ধতার কারণে)। আপনার আসল ক্যোয়ারী ব্যবহার করা হচ্ছে।\",\n    errorAiModelNotFound: (modelName: string) => `\"${modelName}\" এআই মডেলটি খুঁজে পাওয়া যায়নি বা অ্যাক্সেসযোগ্য নয়। অনুগ্রহ করে মডেলের নাম এবং আপনার API কী অনুমতিগুলি পরীক্ষা করুন।`,\n    aiCouldNotEnhance: (itemName: string) => `ডাটাবেসে যা পাওয়া গেছে তার বাইরে এআই \"${itemName}\" এর জন্য আর কোনো বিবরণ দিতে পারেনি।`,\n    errorAiNotConfiguredOrModelForDetails: (itemName: string) => `API কী বা মডেল কনফিগারেশন সমস্যার কারণে \"${itemName}\" এর জন্য বিবরণ তৈরি করার এআই বৈশিষ্ট্যগুলি অনুপলব্ধ।`,\n    errorAiFailedForDetails: (itemName: string) => `এআই \"${itemName}\" এর জন্য বিবরণ তৈরি করতে ব্যর্থ হয়েছে।`,\n    errorAiDetailsCritical: (itemName: string) => `\"${itemName}\" এর জন্য এআই বিবরণ তৈরি করার চেষ্টা করার সময় একটি গুরুতর ত্রুটি ঘটেছে। অনুগ্রহ করে সার্ভার লগ পরীক্ষা করুন।`,\n  },\n};\n\nexport const getTranslations = (lang: Language): TranslationKeys => translations[lang];\n\n"],"names":[],"mappings":";;;;AAsDO,MAAM,eAAkD;IAC7D,IAAI;QACF,SAAS;QACT,aAAa;QACb,mBAAmB;QACnB,cAAc;QACd,eAAe;QACf,SAAS;QACT,OAAO;QACP,SAAS;QACT,cAAc;QACd,WAAW;QACX,gBAAgB;QAChB,mBAAmB;QACnB,kBAAkB;QAClB,YAAY;QACZ,mBAAmB;QACnB,aAAa;QACb,kBAAkB;QAClB,cAAc;QACd,WAAW;QACX,aAAa;QACb,kBAAkB;QAClB,eAAe;QACf,SAAS;QACT,WAAW;QACX,gBAAgB,CAAC,UAAkB,SAAmB,CAAC,wCAAwC,EAAE,SAAS,WAAW,EAAE,OAAO,4BAA4B,CAAC;QAC3J,oBAAoB,CAAC,gBAA0B,CAAC,eAAe,EAAE,cAAc,4BAA4B,CAAC;QAC5G,mBAAmB;QACnB,mBAAmB;QACnB,qBAAqB;QACrB,qBAAqB;QACrB,sCAAsC,CAAC,eAAyB,CAAC,2BAA2B,EAAE,aAAa,yDAAyD,CAAC;QACrK,iCAAiC,CAAC,eAAyB,CAAC,2BAA2B,EAAE,aAAa,UAAU,CAAC;QACjH,qBAAqB;QACrB,mBAAmB;QACnB,mBAAmB;QACnB,kBAAkB;QAClB,kCAAkC;QAClC,6BAA6B;QAC7B,mCAAmC;QACnC,oBAAoB;QACpB,eAAe;QACf,qBAAqB;QACrB,2BAA2B;QAC3B,sBAAsB,CAAC,YAAsB,CAAC,cAAc,EAAE,UAAU,+FAA+F,CAAC;QACxK,mBAAmB,CAAC,WAAqB,CAAC,0CAA0C,EAAE,SAAS,wCAAwC,CAAC;QACxI,uCAAuC,CAAC,WAAqB,CAAC,wCAAwC,EAAE,SAAS,+DAA+D,CAAC;QACjL,yBAAyB,CAAC,WAAqB,CAAC,mCAAmC,EAAE,SAAS,EAAE,CAAC;QACjG,wBAAwB,CAAC,WAAqB,CAAC,mEAAmE,EAAE,SAAS,4BAA4B,CAAC;IAC5J;IACA,IAAI;QACF,SAAS;QACT,aAAa;QACb,mBAAmB;QACnB,cAAc;QACd,eAAe;QACf,SAAS;QACT,OAAO;QACP,SAAS;QACT,cAAc;QACd,WAAW;QACX,gBAAgB;QAChB,mBAAmB;QACnB,kBAAkB;QAClB,YAAY;QACZ,mBAAmB;QACnB,aAAa;QACb,kBAAkB;QAClB,cAAc;QACd,WAAW;QACX,aAAa;QACb,kBAAkB;QAClB,eAAe;QACf,SAAS;QACT,WAAW;QACX,gBAAgB,CAAC,UAAkB,SAAmB,CAAC,KAAK,EAAE,SAAS,kDAAkD,EAAE,OAAO,uCAAuC,CAAC;QAC1K,oBAAoB,CAAC,gBAA0B,CAAC,gBAAgB,EAAE,cAAc,8BAA8B,CAAC;QAC/G,mBAAmB;QACnB,mBAAmB;QACnB,qBAAqB;QACrB,qBAAqB;QACrB,sCAAsC,CAAC,eAAyB,CAAC,CAAC,EAAE,aAAa,0FAA0F,CAAC;QAC5K,iCAAiC,CAAC,eAAyB,CAAC,CAAC,EAAE,aAAa,qCAAqC,CAAC;QAClH,qBAAqB;QACrB,mBAAmB;QACnB,mBAAmB;QACnB,kBAAkB;QAClB,kCAAkC;QAClC,6BAA6B;QAC7B,mCAAmC;QACnC,oBAAoB;QACpB,eAAe;QACf,qBAAqB;QACrB,2BAA2B;QAC3B,sBAAsB,CAAC,YAAsB,CAAC,UAAU,EAAE,UAAU,iGAAiG,CAAC;QACtK,mBAAmB,CAAC,WAAqB,CAAC,0CAA0C,EAAE,SAAS,qCAAqC,CAAC;QACrI,uCAAuC,CAAC,WAAqB,CAAC,mDAAmD,EAAE,SAAS,6DAA6D,CAAC;QAC1L,yBAAyB,CAAC,WAAqB,CAAC,KAAK,EAAE,SAAS,yCAAyC,CAAC;QAC1G,wBAAwB,CAAC,WAAqB,CAAC,CAAC,EAAE,SAAS,+FAA+F,CAAC;IAC7J;IACA,IAAI;QACF,SAAS;QACT,aAAa;QACb,mBAAmB;QACnB,cAAc;QACd,eAAe;QACf,SAAS;QACT,OAAO;QACP,SAAS;QACT,cAAc;QACd,WAAW;QACX,gBAAgB;QAChB,mBAAmB;QACnB,kBAAkB;QAClB,YAAY;QACZ,mBAAmB;QACnB,aAAa;QACb,kBAAkB;QAClB,cAAc;QACd,WAAW;QACX,aAAa;QACb,kBAAkB;QAClB,eAAe;QACf,SAAS;QACT,WAAW;QACX,gBAAgB,CAAC,UAAkB,SAAmB,CAAC,KAAK,EAAE,SAAS,mDAAmD,EAAE,OAAO,2BAA2B,CAAC;QAC/J,oBAAoB,CAAC,gBAA0B,CAAC,iBAAiB,EAAE,cAAc,uCAAuC,CAAC;QACzH,mBAAmB;QACnB,mBAAmB;QACnB,qBAAqB;QACrB,qBAAqB;QACrB,sCAAsC,CAAC,eAAyB,CAAC,CAAC,EAAE,aAAa,gFAAgF,CAAC;QAClK,iCAAiC,CAAC,eAAyB,CAAC,CAAC,EAAE,aAAa,wCAAwC,CAAC;QACrH,qBAAqB;QACrB,mBAAmB;QACnB,mBAAmB;QACnB,kBAAkB;QAClB,kCAAkC;QAClC,6BAA6B;QAC7B,mCAAmC;QACnC,oBAAoB;QACpB,eAAe;QACf,qBAAqB;QACrB,2BAA2B;QAC3B,sBAAsB,CAAC,YAAsB,CAAC,CAAC,EAAE,UAAU,wHAAwH,CAAC;QACpL,mBAAmB,CAAC,WAAqB,CAAC,uCAAuC,EAAE,SAAS,oCAAoC,CAAC;QACjI,uCAAuC,CAAC,WAAqB,CAAC,yCAAyC,EAAE,SAAS,qDAAqD,CAAC;QACxK,yBAAyB,CAAC,WAAqB,CAAC,KAAK,EAAE,SAAS,wCAAwC,CAAC;QACzG,wBAAwB,CAAC,WAAqB,CAAC,CAAC,EAAE,SAAS,6GAA6G,CAAC;IAC3K;AACF;AAEO,MAAM,kBAAkB,CAAC,OAAoC,YAAY,CAAC,KAAK","debugId":null}},
    {"offset": {"line": 623, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-medicine-details.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Generates detailed medicine information using AI.\n * It can generate all details from a search term or supplement existing\n * database information (name, composition, barcode) with AI-generated\n * usage, manufacturer, dosage, and side effects.\n *\n * - generateMedicineDetails - Main exported function to call the flow.\n * - GenerateMedicineDetailsInput - Input type for the flow.\n * - GenerateMedicineDetailsOutput - Output type for the flow.\n */\n\nimport {ai} from '@/ai/genkit';\nimport type { Language } from '@/types';\nimport { getTranslations } from '@/lib/translations';\nimport {z} from 'genkit';\n\nconst GenerateMedicineDetailsInputSchema = z.object({\n  searchTermOrName: z.string().describe('The initial search term, or the medicine name if found in the database.'),\n  language: z.enum(['en', 'hi', 'bn']).describe('The language for the generated details.'),\n  contextName: z.string().optional().describe('The medicine name, if already known from the database. This might be an ID like \"06\".'),\n  contextComposition: z.string().optional().describe('The medicine composition, if already known from the database. This is key for generating details.'),\n  contextBarcode: z.string().optional().describe('The medicine barcode, if already known from the database.'),\n});\nexport type GenerateMedicineDetailsInput = z.infer<typeof GenerateMedicineDetailsInputSchema>;\n\nconst GenerateMedicineDetailsOutputSchema = z.object({\n  name: z.string().describe('The common name of the medicine.'),\n  composition: z.string().describe('The typical composition/active ingredients of the medicine.'),\n  usage: z.string().describe('Typical usage or indications for the medicine.'),\n  manufacturer: z.string().describe('Common manufacturer(s) of the medicine. If multiple, list prominent ones.'),\n  dosage: z.string().describe('General dosage guidelines for the medicine.'),\n  sideEffects: z.string().describe('Common side effects associated with the medicine.'),\n  barcode: z.string().optional().describe('The barcode of the medicine, if applicable or provided in context.'),\n  source: z.enum(['database_ai_enhanced', 'ai_generated', 'database_only', 'ai_unavailable', 'ai_failed']).describe('Indicates if the primary details were from a database and enhanced by AI, or if all details were AI-generated, or if only database details are available due to AI failure/unavailability.'),\n});\nexport type GenerateMedicineDetailsOutput = z.infer<typeof GenerateMedicineDetailsOutputSchema>;\n\n\nexport async function generateMedicineDetails(input: GenerateMedicineDetailsInput): Promise<GenerateMedicineDetailsOutput> {\n  console.log(\"🚀🚀🚀🚀🚀 ENTERING generateMedicineDetails WRAPPER 🚀🚀🚀🚀🚀\");\n  const languageToUse = input.language || 'en';\n  const t_fallback = getTranslations(languageToUse);\n  console.log(\"[generateMedicineDetails wrapper] Input received:\", JSON.stringify(input, null, 2));\n\n  if (!input || (typeof input.searchTermOrName !== 'string' || input.searchTermOrName.trim() === '') && (!input.contextName || !input.contextComposition)) {\n    console.warn(`[generateMedicineDetails wrapper] DETECTED INVALID OR EMPTY INPUT. Input: ${JSON.stringify(input)}`);\n    return {\n      name: input?.contextName || input?.searchTermOrName || t_fallback.infoNotAvailable,\n      composition: input?.contextComposition || t_fallback.infoNotAvailable,\n      usage: t_fallback.infoNotAvailable,\n      manufacturer: t_fallback.infoNotAvailable,\n      dosage: t_fallback.infoNotAvailable,\n      sideEffects: t_fallback.infoNotAvailable,\n      barcode: input?.contextBarcode,\n      source: 'ai_failed',\n    };\n  }\n\n  const nameForFallback = input.contextName || input.searchTermOrName || t_fallback.infoNotAvailable;\n\n  try {\n    console.log(\"🚀🚀🚀🚀🚀 CALLING generateMedicineDetailsFlow FROM WRAPPER 🚀🚀🚀🚀🚀\");\n    const result = await generateMedicineDetailsFlow(input);\n    console.log(\"🚀🚀🚀🚀🚀 RETURNED from generateMedicineDetailsFlow to WRAPPER. Result:\", JSON.stringify(result, null, 2));\n\n    if (result.source === 'ai_unavailable') {\n        console.warn(`[generateMedicineDetails wrapper] Flow indicated AI is unavailable (model/key issue). Input: ${JSON.stringify(input)}`);\n    }\n\n    const validatedResult = {\n        ...result,\n        name: result.name || nameForFallback,\n        composition: result.composition || input.contextComposition || t_fallback.infoNotAvailable,\n    };\n    console.log(\"🚀🚀🚀🚀🚀 EXITING generateMedicineDetails WRAPPER with validated result:\", JSON.stringify(validatedResult, null, 2));\n    return validatedResult;\n\n  } catch (error: unknown) {\n    let rawErrorMessage = \"Unknown AI error during flow execution in wrapper.\";\n    let errorDetails = \"\";\n    if (error instanceof Error) {\n      rawErrorMessage = error.message;\n      errorDetails = error.stack || String(error);\n    } else if (typeof error === 'string') {\n      rawErrorMessage = error;\n      errorDetails = error;\n    } else if (error && typeof error === 'object' && 'message' in error) {\n      rawErrorMessage = String((error as any).message);\n      errorDetails = JSON.stringify(error);\n    }\n    \n    console.error(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n    console.error(\"!!!!!!!! CATCH IN generateMedicineDetails WRAPPER !!!!!!!\");\n    console.error(`Input: ${JSON.stringify(input)}`);\n    console.error(`Message: ${rawErrorMessage}`);\n    console.error(`Details: ${errorDetails}`);\n    console.error(`Full Error Object:`, error);\n    console.error(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\n    const source: GenerateMedicineDetailsOutput['source'] = (input.contextName && input.contextComposition) ? 'database_only' : 'ai_failed';\n    const fallbackResult = {\n      name: nameForFallback,\n      composition: input.contextComposition || t_fallback.infoNotAvailable,\n      usage: t_fallback.infoNotAvailable,\n      manufacturer: t_fallback.infoNotAvailable,\n      dosage: t_fallback.infoNotAvailable,\n      sideEffects: t_fallback.infoNotAvailable,\n      barcode: input.contextBarcode,\n      source: source,\n    };\n    console.log(\"🚀🚀🚀🚀🚀 EXITING generateMedicineDetails WRAPPER with fallback due to CATCH:\", JSON.stringify(fallbackResult, null, 2));\n    return fallbackResult;\n  }\n}\n\nconst medicineDetailsPrompt = ai.definePrompt({\n  name: 'generateMedicineDetailsPrompt',\n  model: 'googleai/gemini-1.5-flash-latest', // Updated model\n  input: {schema: GenerateMedicineDetailsInputSchema},\n  output: {schema: GenerateMedicineDetailsOutputSchema},\n  prompt: `You are a highly knowledgeable pharmaceutical AI assistant. Your goal is to provide comprehensive and accurate medicine details in the specified language: {{language}}.\n\n{{#if contextComposition}}\nThe user has provided context for a medicine:\nIdentifier (Name/ID): \"{{contextName}}\"\nComposition: \"{{contextComposition}}\"\n{{#if contextBarcode}}Barcode: \"{{contextBarcode}}\"{{/if}}\n\nYour primary task is to use the provided 'Composition: \"{{contextComposition}}\"' to generate the following details for the medicine (identified as \"{{contextName}}\") in {{language}}:\n- usage: Typical usage or indications for a medicine with this composition.\n- manufacturer: Common manufacturer(s) of medicines with this composition. If multiple, list prominent ones.\n- dosage: General dosage guidelines for a medicine with this composition.\n- sideEffects: Common side effects associated with this composition.\n\nCRITICALLY, the output 'source' field MUST be \"database_ai_enhanced\".\nThe output 'name' field MUST be \"{{contextName}}\".\nThe output 'composition' field MUST be \"{{contextComposition}}\".\n{{#if contextBarcode}}The output 'barcode' field SHOULD be \"{{contextBarcode}}\".{{else}}If a common barcode is known for a medicine with this composition, provide it; otherwise, you can omit the 'barcode' field or leave it empty.{{/if}}\n\nIf you cannot find specific information for any of the generated fields (usage, manufacturer, dosage, sideEffects) based on the composition, PROVIDE AN EMPTY STRING for that field. Do NOT use phrases like 'Information not available' or 'Not found' yourself in these fields. The system will handle fallbacks for empty strings.\n\nExample for contextName=\"Paracetamol 500mg\", contextComposition=\"Paracetamol 500mg\", language=\"en\":\n  name: \"Paracetamol 500mg\"\n  composition: \"Paracetamol 500mg\"\n  usage: \"Used to treat pain and fever, such as headaches, muscle aches, arthritis, backache, toothaches, colds, and fevers.\"\n  manufacturer: \"Various (e.g., GSK, Mallinckrodt, Aurobindo)\"\n  dosage: \"For adults, 1 to 2 tablets (500mg to 1000mg) every 4 to 6 hours as needed. Do not exceed 4000mg in 24 hours.\"\n  sideEffects: \"Generally well-tolerated. Rare side effects may include allergic reactions, skin rash, or liver damage with overdose.\"\n  barcode: \"123456789012\"\n  source: \"database_ai_enhanced\"\n\n{{else}}\nThe user is searching for information related to: \"{{searchTermOrName}}\".\nThis term could be a medicine name, a partial name, a composition, or a barcode.\n\nFirst, try to identify the most likely specific medicine based on \"{{searchTermOrName}}\".\nThen, provide the following details for that identified medicine in {{language}}:\n- Common name (this should be your identified medicine name).\n- Typical composition/active ingredients.\n- Typical usage or indications.\n- Common manufacturer(s) (if multiple, list prominent ones).\n- General dosage guidelines.\n- Common side effects.\n- Barcode (if identifiable and applicable, otherwise omit or leave empty).\n\nIf \"{{searchTermOrName}}\" is a barcode, try to identify the medicine and its details.\nIf \"{{searchTermOrName}}\" seems to be a composition, describe a common medicine with that composition.\nIf you cannot confidently identify a specific medicine from \"{{searchTermOrName}}\", use \"{{searchTermOrName}}\" as the name if it seems like a product, or a generic phrase like \"Medicine based on '{{searchTermOrName}}'\" for the name field, and use the original \"{{searchTermOrName}}\" or its key components for the composition field.\nThe output 'source' field MUST be \"ai_generated\".\nPROVIDE AN EMPTY STRING for any detail field if information cannot be found. Do NOT use phrases like 'Information not available' or 'Not found' yourself in these fields.\n\nExample for searchTermOrName=\"Amoxicillin\", language=\"en\":\n  name: \"Amoxicillin\"\n  composition: \"Amoxicillin Trihydrate (e.g., 250mg or 500mg capsules)\"\n  usage: \"Used to treat a wide variety of bacterial infections including those of the ear, nose, throat, skin, and urinary tract.\"\n  manufacturer: \"Various generic manufacturers (e.g., Sandoz, Teva, Hikma)\"\n  dosage: \"Typically 250mg to 500mg three times a day for adults, or as prescribed by a doctor. Dosage for children varies by weight.\"\n  sideEffects: \"Common: Nausea, diarrhea, rash. Less common: Vomiting, headache. Seek medical attention for severe allergic reactions.\"\n  barcode: \"\"\n  source: \"ai_generated\"\n{{/if}}\n\nEnsure all textual output (name, composition, usage, manufacturer, dosage, sideEffects) is in {{language}}.\nThe 'source' field must be one of: 'database_ai_enhanced', 'ai_generated', as specified above. Do not use 'database_only', 'ai_unavailable', or 'ai_failed' in the direct AI response.\n`,\n});\n\nconst generateMedicineDetailsFlow = ai.defineFlow(\n  {\n    name: 'generateMedicineDetailsFlow',\n    inputSchema: GenerateMedicineDetailsInputSchema,\n    outputSchema: GenerateMedicineDetailsOutputSchema,\n  },\n  async (input: GenerateMedicineDetailsInput): Promise<GenerateMedicineDetailsOutput> => {\n    console.log(\"🔷🔷🔷🔷🔷 ENTERING generateMedicineDetailsFlow (ai.defineFlow) 🔷🔷🔷🔷🔷\");\n    console.log(\"[generateMedicineDetailsFlow] Input to flow:\", JSON.stringify(input, null, 2));\n\n    if (!process.env.GEMINI_API_KEY) {\n      console.error(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n      console.error(\"CRITICAL ERROR: GEMINI_API_KEY is NOT SET or accessible in generateMedicineDetailsFlow environment!\");\n      console.error(\"This flow WILL FAIL to contact Google AI services.\");\n      console.error(\"Please ensure GEMINI_API_KEY is correctly set in your .env file and the server is restarted.\");\n      console.error(\"Also, check that src/ai/genkit.ts is correctly initializing the googleAI plugin.\");\n      console.error(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n      const t_api_key_fallback = getTranslations(input.language || 'en');\n      return {\n        name: input.contextName || input.searchTermOrName || t_api_key_fallback.infoNotAvailable,\n        composition: input.contextComposition || t_api_key_fallback.infoNotAvailable,\n        usage: t_api_key_fallback.infoNotAvailable,\n        manufacturer: t_api_key_fallback.infoNotAvailable,\n        dosage: t_api_key_fallback.infoNotAvailable,\n        sideEffects: t_api_key_fallback.infoNotAvailable,\n        barcode: input.contextBarcode,\n        source: 'ai_unavailable', \n      };\n    } else {\n      console.log(\"[generateMedicineDetailsFlow] GEMINI_API_KEY appears to be set in the environment.\");\n    }\n\n\n    let rawOutputFromAI: GenerateMedicineDetailsOutput | null = null;\n    const t_flow_fallback = getTranslations(input.language || 'en');\n\n    try {\n      console.log(\"******************************************************************\");\n      console.log(\"[generateMedicineDetailsFlow] Attempting AI prompt call with medicineDetailsPrompt.\");\n      console.log(\"[generateMedicineDetailsFlow] Input being sent to AI prompt object:\", JSON.stringify(input, null, 2));\n      console.log(\"******************************************************************\");\n\n      const {output} = await medicineDetailsPrompt(input);\n      rawOutputFromAI = output;\n\n      console.log(\"******************************************************************\");\n      console.log(\"[generateMedicineDetailsFlow] AI Prompt Call Completed (or at least didn't throw an immediate error to this catch block).\");\n      console.log(\"[generateMedicineDetailsFlow] Value of rawOutputFromAI immediately after assignment:\",\n        rawOutputFromAI === null ? \"NULL_VALUE\" :\n        rawOutputFromAI === undefined ? \"UNDEFINED_VALUE\" :\n        JSON.stringify(rawOutputFromAI, null, 2)\n      );\n      console.log(\"******************************************************************\");\n\n\n      if (!rawOutputFromAI || typeof rawOutputFromAI.name !== 'string' || typeof rawOutputFromAI.composition !== 'string') {\n        console.warn(\n          \"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\",\n          \"\\n[generateMedicineDetailsFlow] CRITICAL ISSUE: AI returned invalid basic structure (e.g., null, undefined, or missing essential name/composition string fields).\",\n          \"\\nInput:\", JSON.stringify(input, null, 2),\n          \"\\nRaw Output as received:\", rawOutputFromAI === null ? \"NULL_VALUE\" : rawOutputFromAI === undefined ? \"UNDEFINED_VALUE\" : JSON.stringify(rawOutputFromAI, null, 2),\n          \"\\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"\n        );\n\n        const sourceForFailure: GenerateMedicineDetailsOutput['source'] = input.contextName ? 'database_only' : 'ai_failed';\n        return {\n            name: input.contextName || input.searchTermOrName || t_flow_fallback.infoNotAvailable,\n            composition: input.contextComposition || t_flow_fallback.infoNotAvailable,\n            usage: t_flow_fallback.infoNotAvailable,\n            manufacturer: t_flow_fallback.infoNotAvailable,\n            dosage: t_flow_fallback.infoNotAvailable,\n            sideEffects: t_flow_fallback.infoNotAvailable,\n            barcode: input.contextBarcode,\n            source: sourceForFailure,\n        };\n      }\n\n      console.log(\"[generateMedicineDetailsFlow] Raw AI Output (BEFORE further validation):\", JSON.stringify(rawOutputFromAI, null, 2));\n\n      let finalSource: GenerateMedicineDetailsOutput['source'];\n      let finalName: string;\n      let finalComposition: string;\n      let finalUsage: string;\n      let finalManufacturer: string;\n      let finalDosage: string;\n      let finalSideEffects: string;\n      let finalBarcode: string | undefined;\n\n      if (input.contextName && input.contextComposition) {\n        finalName = input.contextName;\n        finalComposition = input.contextComposition;\n\n        if (rawOutputFromAI.source === 'database_ai_enhanced') {\n          finalSource = 'database_ai_enhanced';\n          finalUsage = (rawOutputFromAI.usage && rawOutputFromAI.usage.trim() !== '') ? rawOutputFromAI.usage.trim() : t_flow_fallback.infoNotAvailable;\n          finalManufacturer = (rawOutputFromAI.manufacturer && rawOutputFromAI.manufacturer.trim() !== '') ? rawOutputFromAI.manufacturer.trim() : t_flow_fallback.infoNotAvailable;\n          finalDosage = (rawOutputFromAI.dosage && rawOutputFromAI.dosage.trim() !== '') ? rawOutputFromAI.dosage.trim() : t_flow_fallback.infoNotAvailable;\n          finalSideEffects = (rawOutputFromAI.sideEffects && rawOutputFromAI.sideEffects.trim() !== '') ? rawOutputFromAI.sideEffects.trim() : t_flow_fallback.infoNotAvailable;\n          finalBarcode = rawOutputFromAI.barcode?.trim() || input.contextBarcode || undefined;\n\n          const anyDetailEnhanced =\n            (finalUsage !== t_flow_fallback.infoNotAvailable) ||\n            (finalManufacturer !== t_flow_fallback.infoNotAvailable) ||\n            (finalDosage !== t_flow_fallback.infoNotAvailable) ||\n            (finalSideEffects !== t_flow_fallback.infoNotAvailable) ||\n            (finalBarcode && finalBarcode !== input.contextBarcode);\n\n\n          if (!anyDetailEnhanced && finalUsage === t_flow_fallback.infoNotAvailable && finalManufacturer === t_flow_fallback.infoNotAvailable && finalDosage === t_flow_fallback.infoNotAvailable && finalSideEffects === t_flow_fallback.infoNotAvailable ) {\n            console.log(\"[generateMedicineDetailsFlow] AI reported 'database_ai_enhanced' but provided no new textual details beyond context or fallbacks for usage, manufacturer, dosage, sideEffects. Downgrading to 'database_only'.\");\n            finalSource = 'database_only';\n          }\n\n        } else {\n          console.warn(`[generateMedicineDetailsFlow] In DB context path, AI returned source '${rawOutputFromAI.source}' instead of expected 'database_ai_enhanced'. Raw AI output: ${JSON.stringify(rawOutputFromAI)}. Falling back to database_only.`);\n          finalSource = 'database_only';\n          finalUsage = t_flow_fallback.infoNotAvailable;\n          finalManufacturer = t_flow_fallback.infoNotAvailable;\n          finalDosage = t_flow_fallback.infoNotAvailable;\n          finalSideEffects = t_flow_fallback.infoNotAvailable;\n          finalBarcode = input.contextBarcode;\n        }\n      } else {\n        if (rawOutputFromAI.source === 'ai_generated' && rawOutputFromAI.name.trim() !== '' && rawOutputFromAI.composition.trim() !== '') {\n          finalSource = 'ai_generated';\n          finalName = rawOutputFromAI.name.trim();\n          finalComposition = rawOutputFromAI.composition.trim();\n          finalUsage = (rawOutputFromAI.usage && rawOutputFromAI.usage.trim() !== '') ? rawOutputFromAI.usage.trim() : t_flow_fallback.infoNotAvailable;\n          finalManufacturer = (rawOutputFromAI.manufacturer && rawOutputFromAI.manufacturer.trim() !== '') ? rawOutputFromAI.manufacturer.trim() : t_flow_fallback.infoNotAvailable;\n          finalDosage = (rawOutputFromAI.dosage && rawOutputFromAI.dosage.trim() !== '') ? rawOutputFromAI.dosage.trim() : t_flow_fallback.infoNotAvailable;\n          finalSideEffects = (rawOutputFromAI.sideEffects && rawOutputFromAI.sideEffects.trim() !== '') ? rawOutputFromAI.sideEffects.trim() : t_flow_fallback.infoNotAvailable;\n          finalBarcode = rawOutputFromAI.barcode?.trim() || undefined;\n        } else {\n          console.warn(`[generateMedicineDetailsFlow] In AI-only path, AI returned source '${rawOutputFromAI.source}' or missing name/composition. Expected 'ai_generated' with non-empty name/composition. Raw AI output: ${JSON.stringify(rawOutputFromAI)}. Falling back to ai_failed.`);\n          finalSource = 'ai_failed';\n          finalName = input.searchTermOrName || t_flow_fallback.infoNotAvailable;\n          if (rawOutputFromAI.name && rawOutputFromAI.name.trim() !== '') finalName = rawOutputFromAI.name.trim();\n          finalComposition = (rawOutputFromAI.composition && rawOutputFromAI.composition.trim() !== '') ? rawOutputFromAI.composition.trim() : t_flow_fallback.infoNotAvailable;\n\n          finalUsage = t_flow_fallback.infoNotAvailable;\n          finalManufacturer = t_flow_fallback.infoNotAvailable;\n          finalDosage = t_flow_fallback.infoNotAvailable;\n          finalSideEffects = t_flow_fallback.infoNotAvailable;\n          finalBarcode = undefined;\n        }\n      }\n\n      const validatedOutput: GenerateMedicineDetailsOutput = {\n        name: finalName,\n        composition: finalComposition,\n        usage: finalUsage,\n        manufacturer: finalManufacturer,\n        dosage: finalDosage,\n        sideEffects: finalSideEffects,\n        barcode: finalBarcode,\n        source: finalSource,\n      };\n\n      console.log(\"[generateMedicineDetailsFlow] Validated Output to be returned:\", JSON.stringify(validatedOutput, null, 2));\n      console.log(\"🔷🔷🔷🔷🔷 EXITING generateMedicineDetailsFlow (ai.defineFlow) - SUCCESS PATH 🔷🔷🔷🔷🔷\");\n      return validatedOutput;\n\n    } catch (flowError: any) {\n        console.error(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n        console.error(\"!!!!!!!!!!!!!!!!! CRITICAL ERROR IN generateMedicineDetailsFlow CATCH BLOCK !!!!!!!!!!!!!!!!!!\");\n        console.error(`Input that caused error: ${JSON.stringify(input)}`);\n        \n        let errorToLog = flowError;\n        if (flowError && flowError.cause instanceof Error) {\n          console.error(\"Original Cause of Error:\", flowError.cause.message, flowError.cause.stack);\n          errorToLog = flowError.cause; \n        }\n\n        console.error(`Error Type: ${errorToLog.name || 'Unknown type'}`);\n        console.error(`Error Message: ${errorToLog.message || 'No message available'}`);\n        console.error(`Error Stack: ${errorToLog.stack || 'No stack trace available'}`);\n\n        if (errorToLog.response && errorToLog.response.data) console.error(\"Error Response Data (from original error):\", errorToLog.response.data);\n        \n        console.error(`Full Error Object (potentially wrapped):`, JSON.stringify(flowError, Object.getOwnPropertyNames(flowError), 2));\n        console.error(`Raw AI Output (if available from before error): ${rawOutputFromAI === null ? \"NULL_VALUE\" : rawOutputFromAI === undefined ? \"UNDEFINED_VALUE\" : JSON.stringify(rawOutputFromAI, null, 2)}`);\n        console.error(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\n\n        let sourceForError: GenerateMedicineDetailsOutput['source'] = (input.contextName && input.contextComposition) ? 'database_only' : 'ai_failed';\n\n        if (errorToLog.message) {\n            const lowerMessage = errorToLog.message.toLowerCase();\n            if (lowerMessage.includes('api key not valid') || lowerMessage.includes('user location is not supported') || lowerMessage.includes('api_key_invalid') || lowerMessage.includes('api key is invalid') || lowerMessage.includes('permission') || lowerMessage.includes('denied')) {\n              console.error(`[generateMedicineDetailsFlow] Categorized Error: Probable API key, permission, or configuration issue: ${errorToLog.message}`);\n              sourceForError = 'ai_unavailable';\n            } else if (lowerMessage.includes('model not found') || lowerMessage.includes('could not find model') || lowerMessage.includes('404 not found')) {\n              console.error(`[generateMedicineDetailsFlow] Categorized Error: AI model not found or configured: ${errorToLog.message}`);\n              sourceForError = 'ai_unavailable';\n            } else if (lowerMessage.includes('billing account not found') || lowerMessage.includes('billing issues')) {\n                 console.error(`[generateMedicineDetailsFlow] Categorized Error: Billing issue: ${errorToLog.message}`);\n                 sourceForError = 'ai_unavailable';\n            } else if (lowerMessage.includes(\"failed to fetch\") || lowerMessage.includes(\"network error\")) {\n                console.error(`[generateMedicineDetailsFlow] Categorized Error: Network issue or AI service unreachable: ${errorToLog.message}`);\n                sourceForError = 'ai_failed'; \n            } else if (errorToLog.name === 'ZodError') { \n                console.error(`[generateMedicineDetailsFlow] Categorized Error: Zod validation error on AI output: ${errorToLog.message}. Details:`, (errorToLog as any).errors);\n                sourceForError = 'ai_failed';\n            }\n        }\n        \n        const errorFallbackResult = {\n            name: input.contextName || input.searchTermOrName || t_flow_fallback.infoNotAvailable,\n            composition: input.contextComposition || t_flow_fallback.infoNotAvailable,\n            usage: t_flow_fallback.infoNotAvailable,\n            manufacturer: t_flow_fallback.infoNotAvailable,\n            dosage: t_flow_fallback.infoNotAvailable,\n            sideEffects: t_flow_fallback.infoNotAvailable,\n            barcode: input.contextBarcode,\n            source: sourceForError,\n        };\n        console.log(\"🔷🔷🔷🔷🔷 EXITING generateMedicineDetailsFlow (ai.defineFlow) - CATCH PATH 🔷🔷🔷🔷🔷\", JSON.stringify(errorFallbackResult, null, 2));\n        return errorFallbackResult;\n    }\n  }\n);\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1002, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 1058, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/medisearch-app.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/medisearch-app.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/medisearch-app.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqS,GAClU,mEACA","debugId":null}},
    {"offset": {"line": 1072, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/medisearch-app.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/medisearch-app.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/medisearch-app.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAiR,GAC9S,+CACA","debugId":null}},
    {"offset": {"line": 1086, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 1096, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx"],"sourcesContent":["import MediSearchApp from \"@/components/medisearch-app\";\n\nexport default function HomePage() {\n  return <MediSearchApp />;\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS;IACtB,qBAAO,8OAAC,uIAAA,CAAA,UAAa;;;;;AACvB","debugId":null}}]
}