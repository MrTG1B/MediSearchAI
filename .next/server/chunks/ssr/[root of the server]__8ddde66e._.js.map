{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["\nimport {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\nimport { config } from 'dotenv';\n\nconfig(); // Ensures .env variables are loaded\n\nconst plugins = [];\n\nif (process.env.GOOGLE_API_KEY && process.env.GOOGLE_API_KEY !== \"\") {\n  plugins.push(googleAI());\n} else {\n  console.error(\n    'üî¥ Genkit Initialization Error: GOOGLE_API_KEY is not set or is empty in the environment variables.\\n' +\n    '   AI-powered features (like medicine search enhancement and details generation) will likely fail.\\n' +\n    '   Please add your GOOGLE_API_KEY to the .env file.\\n' +\n    '   You can obtain an API key from Google AI Studio (https://aistudio.google.com/app/apikey).\\n' +\n    '   Attempting to initialize Genkit without the Google AI plugin if the key is missing.'\n  );\n  // If the key is missing, we initialize Genkit without the googleAI plugin.\n  // Flows attempting to use it will fail, but Genkit itself might initialize.\n  // Alternatively, one could add a mock plugin here for development without a key.\n}\n\nexport const ai = genkit({\n  plugins: plugins,\n  model: 'googleai/gemini-2.0-flash', // Default model\n});\n\nif (plugins.length === 0) {\n    console.warn(\n        '‚ö†Ô∏è Genkit initialized without any AI plugins (likely due to missing GOOGLE_API_KEY). ' +\n        'AI-dependent flows will not function.'\n    );\n}\n"],"names":[],"mappings":";;;AACA;AAAA;AACA;AAAA;AACA;;;;AAEA,CAAA,GAAA,qIAAA,CAAA,SAAM,AAAD,KAAK,oCAAoC;AAE9C,MAAM,UAAU,EAAE;AAElB,IAAI,QAAQ,GAAG,CAAC,cAAc,IAAI,QAAQ,GAAG,CAAC,cAAc,KAAK,IAAI;IACnE,QAAQ,IAAI,CAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;AACtB,OAAO;IACL,QAAQ,KAAK,CACX,0GACA,yGACA,0DACA,mGACA;AAEF,2EAA2E;AAC3E,4EAA4E;AAC5E,iFAAiF;AACnF;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;IACT,OAAO;AACT;AAEA,IAAI,QAAQ,MAAM,KAAK,GAAG;IACtB,QAAQ,IAAI,CACR,0FACA;AAER","debugId":null}},
    {"offset": {"line": 249, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/enhance-medicine-search.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Enhances medicine search functionality by extracting the intended medicine name from potentially misspelled, partial queries, barcodes, or composition keywords.\n *\n * - enhanceMedicineSearch - A function that takes a user's search query and returns a term suitable for backend search.\n * - EnhanceMedicineSearchInput - The input type for the enhanceMedicineSearch function.\n * - EnhanceMedicineSearchOutput - The return type for the enhanceMedicineSearch function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst EnhanceMedicineSearchInputSchema = z.object({\n  query: z.string().describe('The user input query, which may contain misspellings, be incomplete, a barcode, or composition keywords, potentially including dosages.'),\n});\nexport type EnhanceMedicineSearchInput = z.infer<typeof EnhanceMedicineSearchInputSchema>;\n\nconst EnhanceMedicineSearchOutputSchema = z.object({\n  correctedMedicineName: z\n    .string()\n    .describe('The corrected/completed medicine name, barcode, or composition keyword extracted from the query, suitable for backend search. Should retain specific details like dosages if they appear to be part of a product name.'),\n});\nexport type EnhanceMedicineSearchOutput = z.infer<typeof EnhanceMedicineSearchOutputSchema>;\n\nexport async function enhanceMedicineSearch(input: EnhanceMedicineSearchInput): Promise<EnhanceMedicineSearchOutput> {\n  if (ai.plugins.length === 0) {\n    console.warn(\"enhanceMedicineSearch: AI plugin not available (likely GOOGLE_API_KEY missing). Returning original query.\");\n    return { correctedMedicineName: input.query };\n  }\n  try {\n    const result = await enhanceMedicineSearchFlow(input);\n    return result;\n  } catch (error: any) { \n    console.error(`Error in enhanceMedicineSearch wrapper for query \"${input.query}\":`, error.message || error);\n    return { correctedMedicineName: input.query }; \n  }\n}\n\nconst enhanceMedicineSearchPrompt = ai.definePrompt({\n  name: 'enhanceMedicineSearchPrompt',\n  input: {schema: EnhanceMedicineSearchInputSchema},\n  output: {schema: EnhanceMedicineSearchOutputSchema},\n  prompt: `You are an AI assistant for a medicine search application. Your primary goal is to help identify the medicine the user is looking for.\nThe user query can be a medicine name (possibly misspelled or partial, and may include dosages like \"500mg\"), its barcode, or keywords from its composition.\nBased on the input, determine the most likely *medicine name* or the *original query if it seems to be a direct identifier like a barcode or a specific product formulation that doesn't map to a more general common name*.\nReturn this as \\`correctedMedicineName\\`.\n\nThe subsequent search will use this \\`correctedMedicineName\\` to look up medicines by name, barcode, or composition.\nIf the query includes dosage or strength (e.g., \"Paracetamol 500mg\", \"Dolo 650\"), and this appears to be part of a specific product name or common way of referring to it, RETAIN these details in \\`correctedMedicineName\\`.\nIf the query is a general description (e.g., \"medicine for headache\"), extract the key medicinal component.\n\nExamples:\n- Query: \"panadol\", correctedMedicineName: \"Panadol\"\n- Query: \"amoxilin\", correctedMedicineName: \"Amoxicillin\"\n- Query: \"dolo 650\", correctedMedicineName: \"Dolo 650\"\n- Query: \"Paracetamol 500mg Tablet\", correctedMedicineName: \"Paracetamol 500mg Tablet\"\n- Query: \"Aceclofenac 100 mg Paracetamol 325 mg\", correctedMedicineName: \"Aceclofenac 100 mg Paracetamol 325 mg\"\n- Query: \"Barcode 1234567890123 for Paracetamol\", correctedMedicineName: \"Paracetamol\"\n- Query: \"1234567890123\" (assume this is a barcode), correctedMedicineName: \"1234567890123\"\n- Query: \"syrup with paracetamol 500mg\" (descriptive), correctedMedicineName: \"Paracetamol\"\n- Query: \"medicine for headache with ibuprofen\", correctedMedicineName: \"Ibuprofen\"\n\n\nIf the input is a barcode, and you cannot confidently map it to a common medicine name, return the barcode itself.\nIf the input is a composition keyword (e.g. \"Paracetamol\"), return it or a slightly refined version.\nThe key is to provide a search term that will be effective for the backend, preserving specificity when it seems intentional.\n\nUser Query: {{{query}}}\n  `,\n});\n\nconst enhanceMedicineSearchFlow = ai.defineFlow(\n  {\n    name: 'enhanceMedicineSearchFlow',\n    inputSchema: EnhanceMedicineSearchInputSchema,\n    outputSchema: EnhanceMedicineSearchOutputSchema,\n  },\n  async input => {\n    try {\n      const {output} = await enhanceMedicineSearchPrompt(input);\n      if (!output) {\n        console.error(\"enhanceMedicineSearchFlow: AI returned no output or an invalid structure for input:\", input);\n        throw new Error(\"AI failed to enhance search query or return valid output structure.\");\n      }\n      return output;\n    } catch (flowError: any) {\n      const errorMessage = flowError.message || \"Unknown error in enhanceMedicineSearchFlow\";\n      console.error(`enhanceMedicineSearchFlow: Error during prompt execution for input: ${JSON.stringify(input)} - Error:`, errorMessage, flowError.stack);\n      // Throw a new, simple error to ensure serializability for Server Components\n      throw new Error(`AI Enhancement Error: ${errorMessage}`);\n    }\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC7B;AAGA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,uBAAuB,uIAAA,CAAA,IAAC,CACrB,MAAM,GACN,QAAQ,CAAC;AACd;AAGO,eAAe,uCAAmB,GAAnB,sBAAsB,KAAiC;IAC3E,IAAI,mHAAA,CAAA,KAAE,CAAC,OAAO,CAAC,MAAM,KAAK,GAAG;QAC3B,QAAQ,IAAI,CAAC;QACb,OAAO;YAAE,uBAAuB,MAAM,KAAK;QAAC;IAC9C;IACA,IAAI;QACF,MAAM,SAAS,MAAM,0BAA0B;QAC/C,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,CAAC,kDAAkD,EAAE,MAAM,KAAK,CAAC,EAAE,CAAC,EAAE,MAAM,OAAO,IAAI;QACrG,OAAO;YAAE,uBAAuB,MAAM,KAAK;QAAC;IAC9C;AACF;AAEA,MAAM,8BAA8B,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAClD,MAAM;IACN,OAAO;QAAC,QAAQ;IAAgC;IAChD,QAAQ;QAAC,QAAQ;IAAiC;IAClD,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;EA0BT,CAAC;AACH;AAEA,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC7C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,IAAI;QACF,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,4BAA4B;QACnD,IAAI,CAAC,QAAQ;YACX,QAAQ,KAAK,CAAC,uFAAuF;YACrG,MAAM,IAAI,MAAM;QAClB;QACA,OAAO;IACT,EAAE,OAAO,WAAgB;QACvB,MAAM,eAAe,UAAU,OAAO,IAAI;QAC1C,QAAQ,KAAK,CAAC,CAAC,oEAAoE,EAAE,KAAK,SAAS,CAAC,OAAO,SAAS,CAAC,EAAE,cAAc,UAAU,KAAK;QACpJ,4EAA4E;QAC5E,MAAM,IAAI,MAAM,CAAC,sBAAsB,EAAE,cAAc;IACzD;AACF;;;IAnEoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 357, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-medicine-details.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Generates detailed medicine information using AI.\n * It can generate all details from a search term or supplement existing\n * database information (name, composition, barcode) with AI-generated\n * usage, manufacturer, dosage, and side effects.\n *\n * - generateMedicineDetails - Main exported function to call the flow.\n * - GenerateMedicineDetailsInput - Input type for the flow.\n * - GenerateMedicineDetailsOutput - Output type for the flow.\n */\n\nimport {ai} from '@/ai/genkit';\nimport type { Language } from '@/types';\nimport {z} from 'genkit';\n\nconst GenerateMedicineDetailsInputSchema = z.object({\n  searchTermOrName: z.string().describe('The initial search term, or the medicine name if found in the database.'),\n  language: z.enum(['en', 'hi', 'bn']).describe('The language for the generated details.'),\n  contextName: z.string().optional().describe('The medicine name, if already known from the database.'),\n  contextComposition: z.string().optional().describe('The medicine composition, if already known from the database.'),\n  contextBarcode: z.string().optional().describe('The medicine barcode, if already known from the database.'),\n});\nexport type GenerateMedicineDetailsInput = z.infer<typeof GenerateMedicineDetailsInputSchema>;\n\nconst GenerateMedicineDetailsOutputSchema = z.object({\n  name: z.string().describe('The common name of the medicine.'),\n  composition: z.string().describe('The typical composition/active ingredients of the medicine.'),\n  usage: z.string().describe('Typical usage or indications for the medicine.'),\n  manufacturer: z.string().describe('Common manufacturer(s) of the medicine. If multiple, list prominent ones.'),\n  dosage: z.string().describe('General dosage guidelines for the medicine.'),\n  sideEffects: z.string().describe('Common side effects associated with the medicine.'),\n  barcode: z.string().optional().describe('The barcode of the medicine, if applicable or provided in context.'),\n  source: z.enum(['database_ai_enhanced', 'ai_generated', 'database_only']).describe('Indicates if the primary details were from a database and enhanced by AI, or if all details were AI-generated, or if only database details are available due to AI failure.'),\n});\nexport type GenerateMedicineDetailsOutput = z.infer<typeof GenerateMedicineDetailsOutputSchema>;\n\n\nexport async function generateMedicineDetails(input: GenerateMedicineDetailsInput): Promise<GenerateMedicineDetailsOutput> {\n  const genericAiFailureMessage = \"AI generation failed. Details unavailable. Check API key or server logs.\";\n  const genericConfigIssueMessage = \"Not available due to AI configuration issue.\";\n  const name = input.contextName || input.searchTermOrName;\n  const composition = input.contextComposition || genericConfigIssueMessage; \n\n  if (ai.plugins.length === 0) {\n    console.warn(\"generateMedicineDetails: AI plugin not available (likely GOOGLE_API_KEY missing). Returning placeholder data.\");\n    return {\n      name: name,\n      composition: composition,\n      usage: genericConfigIssueMessage,\n      manufacturer: genericConfigIssueMessage,\n      dosage: genericConfigIssueMessage,\n      sideEffects: genericConfigIssueMessage,\n      barcode: input.contextBarcode,\n      source: input.contextName ? 'database_only' : 'ai_generated', \n    };\n  }\n  try {\n    const result = await generateMedicineDetailsFlow(input);\n    return result;\n  } catch (error: any) {\n    console.error(`Error in generateMedicineDetails wrapper for input ${JSON.stringify(input)}:`, error.message || error);\n     return {\n      name: name,\n      composition: composition,\n      usage: error.message || genericAiFailureMessage, // Use specific error message if available\n      manufacturer: error.message || genericAiFailureMessage,\n      dosage: error.message || genericAiFailureMessage,\n      sideEffects: error.message || genericAiFailureMessage,\n      barcode: input.contextBarcode,\n      source: input.contextName ? 'database_only' : 'ai_generated', \n    };\n  }\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateMedicineDetailsPrompt',\n  input: {schema: GenerateMedicineDetailsInputSchema},\n  output: {schema: GenerateMedicineDetailsOutputSchema},\n  prompt: `You are a highly knowledgeable pharmaceutical AI assistant. Your goal is to provide comprehensive and accurate medicine details in the specified language: {{language}}.\n\n{{#if contextName}}\nThe user has provided context for a medicine:\nName: \"{{contextName}}\"\nComposition: \"{{contextComposition}}\"\n{{#if contextBarcode}}Barcode: \"{{contextBarcode}}\"{{/if}}\n\nBased on this information, please generate the following details for \"{{contextName}}\" in {{language}}:\n- Typical usage or indications.\n- Common manufacturer(s) (if multiple, list prominent ones).\n- General dosage guidelines.\n- Common side effects.\n\nThe output 'name' should be \"{{contextName}}\".\nThe output 'composition' should be \"{{contextComposition}}\".\n{{#if contextBarcode}}The output 'barcode' should be \"{{contextBarcode}}\".{{/if}}\nThe output 'source' should be \"database_ai_enhanced\".\n\nExample for contextName=\"Paracetamol 500mg\", contextComposition=\"Paracetamol 500mg\":\n  name: \"Paracetamol 500mg\"\n  composition: \"Paracetamol 500mg\"\n  usage: \"Used to treat pain and fever.\"\n  manufacturer: \"Various generic manufacturers, GSK\"\n  dosage: \"1-2 tablets every 4-6 hours.\"\n  sideEffects: \"Rare, may include allergic reactions.\"\n  source: \"database_ai_enhanced\"\n\n{{else}}\nThe user is searching for information related to: \"{{searchTermOrName}}\".\nThis term could be a medicine name, a partial name, a composition, or a barcode.\n\nFirst, try to identify the most likely specific medicine based on \"{{searchTermOrName}}\".\nThen, provide the following details for that identified medicine in {{language}}:\n- Common name.\n- Typical composition/active ingredients.\n- Typical usage or indications.\n- Common manufacturer(s) (if multiple, list prominent ones).\n- General dosage guidelines.\n- Common side effects.\n- Barcode (if identifiable and applicable, otherwise omit or leave empty).\n\nIf \"{{searchTermOrName}}\" is a barcode, try to identify the medicine and its details.\nIf \"{{searchTermOrName}}\" seems to be a composition, describe a common medicine with that composition.\nIf you cannot confidently identify a specific medicine from \"{{searchTermOrName}}\", clearly state that you are providing general information based on the term or that no specific medicine could be identified. In such cases, try your best to populate the fields, using \"Not specifically identified\" or similar for name/composition if needed.\nThe output 'source' should be \"ai_generated\".\n\nExample for searchTermOrName=\"Amoxicillin\":\n  name: \"Amoxicillin\"\n  composition: \"Amoxicillin Trihydrate (e.g., 250mg or 500mg capsules)\"\n  usage: \"Used to treat a wide variety of bacterial infections.\"\n  manufacturer: \"Various generic manufacturers, Sandoz, Teva\"\n  dosage: \"Typically 250mg to 500mg three times a day.\"\n  sideEffects: \"Nausea, diarrhea, rash.\"\n  source: \"ai_generated\"\n\nExample for searchTermOrName=\"painkiller for headache\":\n  name: \"Common Painkillers (e.g., Paracetamol, Ibuprofen)\"\n  composition: \"Varies (e.g., Paracetamol, Ibuprofen)\"\n  usage: \"To relieve headache pain.\"\n  manufacturer: \"Various\"\n  dosage: \"Follow product-specific instructions.\"\n  sideEffects: \"Varies by specific painkiller.\"\n  source: \"ai_generated\"\n{{/if}}\n\nEnsure all textual output (name, composition, usage, manufacturer, dosage, sideEffects) is in {{language}}.\n`,\n});\n\nconst generateMedicineDetailsFlow = ai.defineFlow(\n  {\n    name: 'generateMedicineDetailsFlow',\n    inputSchema: GenerateMedicineDetailsInputSchema,\n    outputSchema: GenerateMedicineDetailsOutputSchema,\n  },\n  async (input) => {\n    try {\n      const {output} = await prompt(input);\n      if (!output) {\n          console.error(\"generateMedicineDetailsFlow: AI returned no output or an invalid structure for input:\", input);\n          throw new Error(\"AI failed to generate medicine details or return a valid structure.\");\n      }\n      \n      if (!output.source) {\n        output.source = input.contextName ? 'database_ai_enhanced' : 'ai_generated';\n      }\n      if (input.contextBarcode && !output.barcode) {\n          output.barcode = input.contextBarcode;\n      }\n      return output;\n    } catch (flowError: any) {\n        const errorMessage = flowError.message || \"Unknown error in generateMedicineDetailsFlow\";\n        console.error(`generateMedicineDetailsFlow: Error during prompt execution for input ${JSON.stringify(input)} - Error:`, errorMessage, flowError.stack);\n        // Throw a new, simple error to ensure serializability for Server Components\n        throw new Error(`AI Generation Error: ${errorMessage}`);\n    }\n  }\n);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 552, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 608, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/medisearch-app.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/medisearch-app.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/medisearch-app.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqS,GAClU,mEACA","debugId":null}},
    {"offset": {"line": 622, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/medisearch-app.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/medisearch-app.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/medisearch-app.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAiR,GAC9S,+CACA","debugId":null}},
    {"offset": {"line": 636, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 646, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx"],"sourcesContent":["import MediSearchApp from \"@/components/medisearch-app\";\n\nexport default function HomePage() {\n  return <MediSearchApp />;\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS;IACtB,qBAAO,8OAAC,uIAAA,CAAA,UAAa;;;;;AACvB","debugId":null}}]
}