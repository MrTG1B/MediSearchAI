{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/translations.ts"],"sourcesContent":["\nimport type { Language } from '@/types';\n\nexport type TranslationKeys = {\n  appName: string;\n  searchTitle: string;\n  searchPlaceholder: string;\n  searchButton: string;\n  languageLabel: string;\n  english: string;\n  hindi: string;\n  bengali: string;\n  resultsTitle: string;\n  noResults: string;\n  noResultsTitle: string;\n  medicineNameLabel: string;\n  compositionLabel: string;\n  usageLabel: string;\n  manufacturerLabel: string;\n  dosageLabel: string;\n  sideEffectsLabel: string;\n  barcodeLabel: string;\n  mrpLabel: string;\n  uomLabel: string;\n  loadingAi: string;\n  loadingData: string;\n  loadingAiDetails: string;\n  errorOccurred: string;\n  errorAi: string;\n  errorData: string;\n  errorAiDetails: (itemName: string, source: string) => string;\n  searchWithAiResult: (correctedName: string) => string;\n  clearSearchButton: string;\n  sourceDbAiMessage: string;\n  sourceAiOnlyMessage: string;\n  sourceDbOnlyMessage: string;\n  sourceAiUnavailableForDetailsMessage: (medicineName: string) => string;\n  sourceAiFailedForDetailsMessage: (medicineName: string) => string;\n  barcodeNotAvailable: string;\n  initialHelperText: string;\n  allRightsReserved: string;\n  infoNotAvailable: string;\n  errorAiNotConfiguredOrModelTitle: string;\n  errorAiNotConfiguredOrModel: string;\n  errorAiNotConfiguredOrModelDetail: string;\n  errorAiFailedTitle: string;\n  errorAiFailed: string;\n  errorAiFailedDetail: string;\n  errorAiEnhancementSkipped: string;\n  errorAiModelNotFound: (modelName: string) => string;\n  aiCouldNotEnhance: (itemName: string) => string;\n  errorAiNotConfiguredOrModelForDetails: (itemName: string) => string;\n  errorAiFailedForDetails: (itemName: string) => string;\n  errorAiDetailsCritical: (itemName: string) => string;\n};\n\nexport const translations: Record<Language, TranslationKeys> = {\n  en: {\n    appName: 'WellMeds',\n    searchTitle: 'Search for Medicines',\n    searchPlaceholder: 'Enter medicine name, barcode, or composition...',\n    searchButton: 'Search',\n    languageLabel: 'Language',\n    english: 'English',\n    hindi: 'Hindi',\n    bengali: 'Bengali',\n    resultsTitle: 'Search Result',\n    noResults: 'No medicine found matching your query.',\n    noResultsTitle: 'No Specific Match Found',\n    medicineNameLabel: 'Name',\n    compositionLabel: 'Composition',\n    usageLabel: 'Usage',\n    manufacturerLabel: 'Manufacturer',\n    dosageLabel: 'Dosage',\n    sideEffectsLabel: 'Side Effects',\n    barcodeLabel: 'Barcode',\n    mrpLabel: 'MRP',\n    uomLabel: 'Unit of Measure',\n    loadingAi: 'Enhancing search with AI...',\n    loadingData: 'Searching database...',\n    loadingAiDetails: 'Generating details with AI...',\n    errorOccurred: 'An Error Occurred',\n    errorAi: 'AI search enhancement failed or was skipped. Using original query.',\n    errorData: 'Failed to fetch medicine data from database.',\n    errorAiDetails: (itemName: string, source: string) => `AI could not generate full details for \"${itemName}\". Status: ${source}. Displaying available data.`,\n    searchWithAiResult: (correctedName: string) => `AI suggested: \"${correctedName}\". Searching with this term.`,\n    clearSearchButton: 'Clear Search',\n    sourceDbAiMessage: 'Details from database, enhanced by AI.',\n    sourceAiOnlyMessage: 'Details primarily AI-generated.',\n    sourceDbOnlyMessage: 'Details from database.',\n    sourceAiUnavailableForDetailsMessage: (medicineName: string) => `AI features for enhancing \"${medicineName}\" details are unavailable due to API key or model issues.`,\n    sourceAiFailedForDetailsMessage: (medicineName: string) => `AI enhancement failed for \"${medicineName}\" details.`,\n    barcodeNotAvailable: 'Not available',\n    initialHelperText: 'Enter a medicine name, barcode, or composition to begin your search.',\n    allRightsReserved: 'All rights reserved.',\n    infoNotAvailable: \"Information not available.\",\n    errorAiNotConfiguredOrModelTitle: \"AI Key/Model Issue\",\n    errorAiNotConfiguredOrModel: \"AI-powered features are currently unavailable due to an issue with the AI configuration (API Key or Model).\",\n    errorAiNotConfiguredOrModelDetail: \"Please ensure the GEMINI_API_KEY is correctly set in your .env file, is valid, has billing enabled, and the specified AI model is accessible. Restart the server after changes.\",\n    errorAiFailedTitle: \"AI Processing Error\",\n    errorAiFailed: \"There was an error while trying to use AI. Some information may be missing or incomplete.\",\n    errorAiFailedDetail: \"Please check your server logs for more specific error details from the AI service. This could be due to network problems or other API issues.\",\n    errorAiEnhancementSkipped: \"AI search enhancement was skipped (possibly due to AI unavailability). Using your original query.\",\n    errorAiModelNotFound: (modelName: string) => `The AI model \"${modelName}\" was not found or is not accessible. Please check the model name and your API key permissions.`,\n    aiCouldNotEnhance: (itemName: string) => `AI could not provide further details for \"${itemName}\" beyond what was found in the database.`,\n    errorAiNotConfiguredOrModelForDetails: (itemName: string) => `AI features for generating details for \"${itemName}\" are unavailable due to API key or model configuration issues.`,\n    errorAiFailedForDetails: (itemName: string) => `AI failed to generate details for \"${itemName}\".`,\n    errorAiDetailsCritical: (itemName: string) => `A critical error occurred while trying to generate AI details for \"${itemName}\". Please check server logs.`,\n  },\n  hi: {\n    appName: 'वेलमेड्स',\n    searchTitle: 'दवाएं खोजें',\n    searchPlaceholder: 'दवा का नाम, बारकोड, या संरचना दर्ज करें...',\n    searchButton: 'खोजें',\n    languageLabel: 'भाषा',\n    english: 'अंग्रेज़ी',\n    hindi: 'हिंदी',\n    bengali: 'बंगाली',\n    resultsTitle: 'खोज परिणाम',\n    noResults: 'आपकी क्वेरी से मेल खाने वाली कोई दवा नहीं मिली।',\n    noResultsTitle: 'कोई विशिष्ट मिलान नहीं मिला',\n    medicineNameLabel: 'नाम',\n    compositionLabel: 'संरचना',\n    usageLabel: 'उपयोग',\n    manufacturerLabel: 'निर्माता',\n    dosageLabel: 'खुराक',\n    sideEffectsLabel: 'दुष्प्रभाव',\n    barcodeLabel: 'बारकोड',\n    mrpLabel: 'एमआरपी',\n    uomLabel: 'माप की इकाई',\n    loadingAi: 'एआई के साथ खोज को बढ़ाया जा रहा है...',\n    loadingData: 'डेटाबेस में खोजा जा रहा है...',\n    loadingAiDetails: 'एआई द्वारा विवरण तैयार किया जा रहा है...',\n    errorOccurred: 'एक त्रुटि हुई',\n    errorAi: 'एआई खोज वृद्धि विफल रही या छोड़ दी गई। मूल क्वेरी का उपयोग किया जा रहा है।',\n    errorData: 'डेटाबेस से दवा डेटा लाने में विफल।',\n    errorAiDetails: (itemName: string, source: string) => `एआई \"${itemName}\" के लिए पूर्ण विवरण उत्पन्न नहीं कर सका। स्थिति: ${source}। उपलब्ध डेटा प्रदर्शित किया जा रहा है।`,\n    searchWithAiResult: (correctedName: string) => `एआई ने सुझाया: \"${correctedName}\"। इस शब्द के साथ खोज रहे हैं।`,\n    clearSearchButton: 'खोज साफ़ करें',\n    sourceDbAiMessage: 'डेटाबेस से विवरण, एआई द्वारा संवर्धित।',\n    sourceAiOnlyMessage: 'विवरण मुख्य रूप से एआई-जनित।',\n    sourceDbOnlyMessage: 'डेटाबेस से विवरण।',\n    sourceAiUnavailableForDetailsMessage: (medicineName: string) => `\"${medicineName}\" विवरणों को बढ़ाने के लिए एआई सुविधाएँ एपीआई कुंजी या मॉडल समस्याओं के कारण अनुपलब्ध हैं।`,\n    sourceAiFailedForDetailsMessage: (medicineName: string) => `\"${medicineName}\" विवरणों के लिए एआई वृद्धि विफल रही।`,\n    barcodeNotAvailable: 'उपलब्ध नहीं है',\n    initialHelperText: 'अपनी खोज शुरू करने के लिए दवा का नाम, बारकोड या संरचना दर्ज करें।',\n    allRightsReserved: 'सभी अधिकार सुरक्षित।',\n    infoNotAvailable: \"जानकारी उपलब्ध नहीं है।\",\n    errorAiNotConfiguredOrModelTitle: \"एआई कुंजी/मॉडल समस्या\",\n    errorAiNotConfiguredOrModel: \"एआई कॉन्फ़िगरेशन (एपीआई कुंजी या मॉडल) के साथ किसी समस्या के कारण एआई-संचालित सुविधाएँ वर्तमान में अनुपलब्ध हैं।\",\n    errorAiNotConfiguredOrModelDetail: \"कृपया सुनिश्चित करें कि GEMINI_API_KEY आपकी .env फ़ाइल में सही ढंग से सेट है, मान्य है, बिलिंग सक्षम है, और निर्दिष्ट एआई मॉडल पहुंच योग्य है। परिवर्तनों के बाद सर्वर को पुनरारंभ करें।\",\n    errorAiFailedTitle: \"एआई प्रसंस्करण त्रुटि\",\n    errorAiFailed: \"एआई का उपयोग करने का प्रयास करते समय एक त्रुटि हुई। कुछ जानकारी गुम या अधूरी हो सकती है।\",\n    errorAiFailedDetail: \"एआई सेवा से अधिक विशिष्ट त्रुटि विवरण के लिए कृपया अपने सर्वर लॉग की जांच करें। यह नेटवर्क समस्याओं या अन्य एपीआई समस्याओं के कारण हो सकता है।\",\n    errorAiEnhancementSkipped: \"एआई खोज वृद्धि छोड़ दी गई थी (संभवतः एआई अनुपलब्धता के कारण)। आपकी मूल क्वेरी का उपयोग किया जा रहा है।\",\n    errorAiModelNotFound: (modelName: string) => `एआई मॉडल \"${modelName}\" नहीं मिला या पहुंच योग्य नहीं है। कृपया मॉडल का नाम और अपनी एपीआई कुंजी अनुमतियों की जांच करें।`,\n    aiCouldNotEnhance: (itemName: string) => `एआई डेटाबेस में मिली जानकारी के अतिरिक्त \"${itemName}\" के लिए और विवरण प्रदान नहीं कर सका।`,\n    errorAiNotConfiguredOrModelForDetails: (itemName: string) => `एपीआई कुंजी या मॉडल कॉन्फ़िगरेशन समस्याओं के कारण \"${itemName}\" के लिए विवरण उत्पन्न करने के लिए एआई सुविधाएँ अनुपलब्ध हैं।`,\n    errorAiFailedForDetails: (itemName: string) => `एआई \"${itemName}\" के लिए विवरण उत्पन्न करने में विफल रहा।`,\n    errorAiDetailsCritical: (itemName: string) => `\"${itemName}\" के लिए एआई विवरण उत्पन्न करने का प्रयास करते समय एक गंभीर त्रुटि हुई। कृपया सर्वर लॉग जांचें।`,\n  },\n  bn: {\n    appName: 'ওয়েলমেডস',\n    searchTitle: 'ওষুধ অনুসন্ধান করুন',\n    searchPlaceholder: 'ওষুধের নাম, বারকোড, বা গঠন লিখুন...',\n    searchButton: 'অনুসন্ধান',\n    languageLabel: 'ভাষা',\n    english: 'ইংরেজি',\n    hindi: 'হিন্দি',\n    bengali: 'বাংলা',\n    resultsTitle: 'অনুসন্ধানের ফলাফল',\n    noResults: 'আপনার প্রশ্নের সাথে মেলে এমন কোন ওষুধ পাওয়া যায়নি।',\n    noResultsTitle: 'কোন নির্দিষ্ট মিল পাওয়া যায়নি',\n    medicineNameLabel: 'নাম',\n    compositionLabel: 'গঠন',\n    usageLabel: 'ব্যবহার',\n    manufacturerLabel: 'প্রস্তুতকারক',\n    dosageLabel: 'মাত্রা',\n    sideEffectsLabel: 'পার্শ্ব প্রতিক্রিয়া',\n    barcodeLabel: 'বারকোড',\n    mrpLabel: 'এমআরপি',\n    uomLabel: 'পরিমাপের একক',\n    loadingAi: 'এআই দিয়ে অনুসন্ধান উন্নত করা হচ্ছে...',\n    loadingData: 'ডাটাবেস অনুসন্ধান করা হচ্ছে...',\n    loadingAiDetails: 'এআই দ্বারা বিস্তারিত তৈরি করা হচ্ছে...',\n    errorOccurred: 'একটি ত্রুটি ঘটেছে',\n    errorAi: 'এআই অনুসন্ধান উন্নতি ব্যর্থ হয়েছে বা এড়িয়ে যাওয়া হয়েছে। মূল কোয়েরি ব্যবহার করা হচ্ছে।',\n    errorData: 'ডাটাবেস থেকে ওষুধের ডেটা আনতে ব্যর্থ হয়েছে।',\n    errorAiDetails: (itemName: string, source: string) => `এআই \"${itemName}\" এর জন্য সম্পূর্ণ বিবরণ তৈরি করতে পারেনি। স্থিতি: ${source}। উপলব্ধ ডেটা দেখানো হচ্ছে।`,\n    searchWithAiResult: (correctedName: string) => `এআই প্রস্তাবিত: \"${correctedName}\"। এই শব্দটি দিয়ে অনুসন্ধান করা হচ্ছে।`,\n    clearSearchButton: 'অনুসন্ধান সাফ করুন',\n    sourceDbAiMessage: 'ডাটাবেস থেকে বিস্তারিত, এআই দ্বারা উন্নত।',\n    sourceAiOnlyMessage: 'বিস্তারিত প্রধানত এআই-জেনারেটেড।',\n    sourceDbOnlyMessage: 'ডাটাবেস থেকে বিস্তারিত।',\n    sourceAiUnavailableForDetailsMessage: (medicineName: string) => `\"${medicineName}\" বিবরণ উন্নত করার জন্য এআই বৈশিষ্ট্যগুলি API কী বা মডেল সমস্যার কারণে অনুপলব্ধ।`,\n    sourceAiFailedForDetailsMessage: (medicineName: string) => `\"${medicineName}\" বিবরণের জন্য এআই উন্নতি ব্যর্থ হয়েছে।`,\n    barcodeNotAvailable: 'উপলব্ধ নয়',\n    initialHelperText: 'আপনার অনুসন্ধান শুরু করতে একটি ওষুধের নাম, বারকোড বা রচনা লিখুন।',\n    allRightsReserved: 'সর্বস্বত্ব সংরক্ষিত।',\n    infoNotAvailable: \"তথ্য উপলব্ধ নেই।\",\n    errorAiNotConfiguredOrModelTitle: \"এআই কী/মডেল সমস্যা\",\n    errorAiNotConfiguredOrModel: \"এআই কনফিগারেশন (এপিআই কী বা মডেল) এর সাথে সমস্যার কারণে এআই-চালিত বৈশিষ্ট্যগুলি বর্তমানে অনুপলব্ধ।\",\n    errorAiNotConfiguredOrModelDetail: \"অনুগ্রহ করে নিশ্চিত করুন যে GEMINI_API_KEY আপনার .env ফাইলে সঠিকভাবে সেট করা আছে, বৈধ, বিলিং সক্ষম করা আছে এবং নির্দিষ্ট AI মডেলটি অ্যাক্সেসযোগ্য। পরিবর্তনের পরে সার্ভারটি পুনরায় চালু করুন।\",\n    errorAiFailedTitle: \"এআই প্রক্রিয়াকরণ ত্রুটি\",\n    errorAiFailed: \"এআই ব্যবহার করার চেষ্টা করার সময় একটি ত্রুটি ঘটেছে। কিছু তথ্য অনুপস্থিত বা অসম্পূর্ণ হতে পারে।\",\n    errorAiFailedDetail: \"এআই পরিষেবা থেকে আরও নির্দিষ্ট ত্রুটির বিবরণের জন্য অনুগ্রহ করে আপনার সার্ভার লগগুলি পরীক্ষা করুন। এটি নেটওয়ার্ক সমস্যা বা অন্যান্য API সমস্যার কারণে হতে পারে।\",\n    errorAiEnhancementSkipped: \"এআই অনুসন্ধান বৃদ্ধি এড়িয়ে যাওয়া হয়েছে (সম্ভবত এআই অনুপলব্ধতার কারণে)। আপনার আসল ক্যোয়ারী ব্যবহার করা হচ্ছে।\",\n    errorAiModelNotFound: (modelName: string) => `\"${modelName}\" এআই মডেলটি খুঁজে পাওয়া যায়নি বা অ্যাক্সেসযোগ্য নয়। অনুগ্রহ করে মডেলের নাম এবং আপনার API কী অনুমতিগুলি পরীক্ষা করুন।`,\n    aiCouldNotEnhance: (itemName: string) => `ডাটাবেসে যা পাওয়া গেছে তার বাইরে এআই \"${itemName}\" এর জন্য আর কোনো বিবরণ দিতে পারেনি।`,\n    errorAiNotConfiguredOrModelForDetails: (itemName: string) => `API কী বা মডেল কনফিগারেশন সমস্যার কারণে \"${itemName}\" এর জন্য বিবরণ তৈরি করার এআই বৈশিষ্ট্যগুলি অনুপলব্ধ।`,\n    errorAiFailedForDetails: (itemName: string) => `এআই \"${itemName}\" এর জন্য বিবরণ তৈরি করতে ব্যর্থ হয়েছে।`,\n    errorAiDetailsCritical: (itemName: string) => `\"${itemName}\" এর জন্য এআই বিবরণ তৈরি করার চেষ্টা করার সময় একটি গুরুতর ত্রুটি ঘটেছে। অনুগ্রহ করে সার্ভার লগ পরীক্ষা করুন।`,\n  },\n};\n\nexport const getTranslations = (lang: Language): TranslationKeys => translations[lang];\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/enhance-medicine-search.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Enhances medicine search functionality by extracting the intended medicine name from potentially misspelled, partial queries, barcodes, or composition keywords.\n *\n * - enhanceMedicineSearch - A function that takes a user's search query and returns a term suitable for backend search.\n * - EnhanceMedicineSearchInput - The input type for the enhanceMedicineSearch function.\n * - EnhanceMedicineSearchOutput - The return type for the enhanceMedicineSearch function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst EnhanceMedicineSearchInputSchema = z.object({\n  query: z.string().describe('The user input query, which may contain misspellings, be incomplete, a barcode, or composition keywords, potentially including dosages.'),\n});\nexport type EnhanceMedicineSearchInput = z.infer<typeof EnhanceMedicineSearchInputSchema>;\n\nconst EnhanceMedicineSearchOutputSchema = z.object({\n  correctedMedicineName: z\n    .string()\n    .describe('The corrected/completed medicine name, barcode, or composition keyword extracted from the query, suitable for backend search. Should retain specific details like dosages if they appear to be part of a product name.'),\n  source: z.enum(['ai_enhanced', 'ai_unavailable', 'ai_failed', 'original_query_used']).optional().describe(\"Indicates the source or status of the correctedMedicineName. 'ai_enhanced' if AI successfully processed. 'ai_unavailable' if AI couldn't be used (e.g. no API key / model issue). 'ai_failed' if AI processing failed. 'original_query_used' if AI was skipped or failed and original query is returned.\"),\n});\nexport type EnhanceMedicineSearchOutput = z.infer<typeof EnhanceMedicineSearchOutputSchema>;\n\nexport async function enhanceMedicineSearch(input: EnhanceMedicineSearchInput): Promise<EnhanceMedicineSearchOutput> {\n  if (!input || typeof input.query !== 'string' || input.query.trim() === '') {\n    console.warn(`enhanceMedicineSearch: Invalid or empty input query. Input: ${JSON.stringify(input)}`);\n    return {\n      correctedMedicineName: input?.query || \"\", \n      source: 'original_query_used', \n    };\n  }\n\n  try {\n    const result = await enhanceMedicineSearchFlow(input);\n    console.log(\"enhanceMedicineSearch (wrapper) - Flow Result:\", JSON.stringify(result, null, 2));\n    if (result.source === 'ai_unavailable') {\n        console.warn(`enhanceMedicineSearch: Flow indicated AI is unavailable (model/key issue). Query: \"${input.query}\"`);\n    }\n    \n    if (!result.correctedMedicineName || result.correctedMedicineName.trim() === '') {\n        console.warn(`enhanceMedicineSearch: AI returned empty correctedMedicineName. Falling back to original query. Input: \"${input.query}\", AI Result: ${JSON.stringify(result)}`);\n        return { correctedMedicineName: input.query, source: 'original_query_used' };\n    }\n    return result;\n  } catch (error: unknown) {\n    let message = \"Unknown error during AI search enhancement.\";\n    let errorDetails = \"\";\n    if (error instanceof Error) {\n      message = error.message;\n      errorDetails = error.stack || String(error);\n    } else if (typeof error === 'string') {\n      message = error;\n      errorDetails = error;\n    } else if (error && typeof error === 'object' && 'message' in error) {\n      message = String((error as any).message);\n      errorDetails = JSON.stringify(error);\n    }\n    console.error(`Critical error in enhanceMedicineSearch wrapper for query \"${input.query}\":`, message, `Details: ${errorDetails}`, error);\n    return { correctedMedicineName: input.query, source: 'ai_failed' };\n  }\n}\n\nconst enhanceMedicineSearchPrompt = ai.definePrompt({\n  name: 'enhanceMedicineSearchPrompt',\n  model: 'googleai/gemini-1.5-flash-latest', // Updated model\n  input: {schema: EnhanceMedicineSearchInputSchema},\n  output: {schema: EnhanceMedicineSearchOutputSchema},\n  prompt: `You are an AI assistant for a medicine search application. Your primary goal is to help identify the medicine the user is looking for.\nThe user query can be a medicine name (possibly misspelled or partial, and may include dosages like \"500mg\"), its barcode, or keywords from its composition.\nBased on the input, determine the most likely *medicine name* or the *original query if it seems to be a direct identifier like a barcode or a specific product formulation that doesn't map to a more general common name*.\nReturn this as \\`correctedMedicineName\\`.\nSet the 'source' field to 'ai_enhanced'.\n\nThe subsequent search will use this \\`correctedMedicineName\\` to look up medicines by name, barcode, or composition.\nIf the query includes dosage or strength (e.g., \"Paracetamol 500mg\", \"Dolo 650\"), and this appears to be part of a specific product name or common way of referring to it, RETAIN these details in \\`correctedMedicineName\\`.\nIf the query is a general description (e.g., \"medicine for headache\"), extract the key medicinal component.\n\nExamples:\n- Query: \"panadol\", correctedMedicineName: \"Panadol\", source: \"ai_enhanced\"\n- Query: \"amoxilin\", correctedMedicineName: \"Amoxicillin\", source: \"ai_enhanced\"\n- Query: \"dolo 650\", correctedMedicineName: \"Dolo 650\", source: \"ai_enhanced\"\n- Query: \"Paracetamol 500mg Tablet\", correctedMedicineName: \"Paracetamol 500mg Tablet\", source: \"ai_enhanced\"\n- Query: \"Aceclofenac 100 mg Paracetamol 325 mg\", correctedMedicineName: \"Aceclofenac 100 mg Paracetamol 325 mg\", source: \"ai_enhanced\"\n- Query: \"Barcode 1234567890123 for Paracetamol\", correctedMedicineName: \"Paracetamol\", source: \"ai_enhanced\"\n- Query: \"1234567890123\" (assume this is a barcode), correctedMedicineName: \"1234567890123\", source: \"ai_enhanced\"\n- Query: \"syrup with paracetamol 500mg\" (descriptive), correctedMedicineName: \"Paracetamol\", source: \"ai_enhanced\"\n- Query: \"medicine for headache with ibuprofen\", correctedMedicineName: \"Ibuprofen\", source: \"ai_enhanced\"\n\nIf the input is a barcode, and you cannot confidently map it to a common medicine name, return the barcode itself.\nIf the input is a composition keyword (e.g. \"Paracetamol\"), return it or a slightly refined version.\nThe key is to provide a search term that will be effective for the backend, preserving specificity when it seems intentional.\nAlways set 'source' to 'ai_enhanced' in your direct response. Do not return empty strings for correctedMedicineName; if unsure, return the original query.\n\nUser Query: {{{query}}}\n  `,\n});\n\nconst enhanceMedicineSearchFlow = ai.defineFlow(\n  {\n    name: 'enhanceMedicineSearchFlow',\n    inputSchema: EnhanceMedicineSearchInputSchema,\n    outputSchema: EnhanceMedicineSearchOutputSchema,\n  },\n  async (input: EnhanceMedicineSearchInput): Promise<EnhanceMedicineSearchOutput> => {\n    let rawOutputFromAI: EnhanceMedicineSearchOutput | null = null;\n    try {\n      const {output} = await enhanceMedicineSearchPrompt(input);\n      rawOutputFromAI = output;\n      console.log(\"enhanceMedicineSearchFlow - Raw AI Output:\", JSON.stringify(rawOutputFromAI, null, 2));\n\n      if (!rawOutputFromAI ||\n          typeof rawOutputFromAI.correctedMedicineName !== 'string' ||\n          rawOutputFromAI.correctedMedicineName.trim() === '' || \n          (rawOutputFromAI.source && !['ai_enhanced', 'ai_unavailable', 'ai_failed', 'original_query_used'].includes(rawOutputFromAI.source)) \n        ) {\n        console.warn(\n            \"enhanceMedicineSearchFlow: AI returned invalid structure, empty correctedMedicineName, or invalid source. Input:\",\n            JSON.stringify(input, null, 2),\n            \"Raw Output:\",\n            JSON.stringify(rawOutputFromAI, null, 2)\n        );\n        return { correctedMedicineName: input.query, source: 'original_query_used' };\n      }\n      \n      return { \n        correctedMedicineName: rawOutputFromAI.correctedMedicineName,\n        source: rawOutputFromAI.source || 'ai_enhanced' \n      };\n\n    } catch (flowError: unknown) {\n      let errorMessage = \"AI model failed to process search enhancement or an unexpected error occurred.\";\n      let errorStack: string | undefined;\n\n      if (flowError instanceof Error) {\n          errorMessage = flowError.message;\n          errorStack = flowError.stack;\n\n          if (errorMessage.includes('API key not valid') || errorMessage.includes('User location is not supported') || errorMessage.includes('API_KEY_INVALID') || errorMessage.includes('API key is invalid') || errorMessage.includes('permission') || errorMessage.includes('denied')) {\n            console.error(`enhanceMedicineSearchFlow: Probable API key, permission, or configuration issue: ${errorMessage}`);\n            return { correctedMedicineName: input.query, source: 'ai_unavailable' };\n          }\n          if (errorMessage.includes('model not found') || errorMessage.includes('Could not find model') || errorMessage.includes('404 Not Found')) {\n            console.error(`enhanceMedicineSearchFlow: AI model not found or configured: ${errorMessage}`);\n            return { correctedMedicineName: input.query, source: 'ai_unavailable' };\n          }\n          if (errorMessage.includes('Billing account not found') || errorMessage.includes('billing issues')) {\n            console.error(`enhanceMedicineSearchFlow: Billing issue: ${errorMessage}`);\n            return { correctedMedicineName: input.query, source: 'ai_unavailable' };\n          }\n      } else if (typeof flowError === 'string') {\n          errorMessage = flowError;\n      } else if (flowError && typeof flowError === 'object' && 'message' in flowError) {\n          errorMessage = String((flowError as any).message);\n      }\n\n      console.error(`enhanceMedicineSearchFlow: Error for input ${JSON.stringify(input)} - Message: ${errorMessage}${errorStack ? `\\nStack: ${errorStack}` : ''}\\nRaw AI Output (if available): ${JSON.stringify(rawOutputFromAI, null, 2)}\\nOriginal Error Object:`, flowError);\n      return { correctedMedicineName: input.query, source: 'ai_failed' };\n    }\n  }\n);\n\n"],"names":[],"mappings":";;;;;IAyBsB","debugId":null}},
    {"offset": {"line": 188, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-medicine-details.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Generates detailed medicine information using AI.\n * It can generate all details from a search term or supplement existing\n * database information (name, composition, barcode) with AI-generated\n * usage, manufacturer, dosage, and side effects.\n *\n * - generateMedicineDetails - Main exported function to call the flow.\n * - GenerateMedicineDetailsInput - Input type for the flow.\n * - GenerateMedicineDetailsOutput - Output type for the flow.\n */\n\nimport {ai} from '@/ai/genkit';\nimport type { Language } from '@/types';\nimport { getTranslations } from '@/lib/translations';\nimport {z} from 'genkit';\n\nconst GenerateMedicineDetailsInputSchema = z.object({\n  searchTermOrName: z.string().describe('The initial search term, or the medicine name if found in the database.'),\n  language: z.enum(['en', 'hi', 'bn']).describe('The language for the generated details.'),\n  contextName: z.string().optional().describe('The medicine name, if already known from the database. This might be an ID like \"06\".'),\n  contextComposition: z.string().optional().describe('The medicine composition, if already known from the database. This is key for generating details.'),\n  contextBarcode: z.string().optional().describe('The medicine barcode, if already known from the database.'),\n  contextMrp: z.union([z.string(), z.number()]).optional().describe('The MRP (Maximum Retail Price) of the medicine, if known from the database.'),\n  contextUom: z.string().optional().describe('The UOM (Unit of Measure, e.g., \"10 tablets\", \"100ml bottle\") of the medicine, if known from the database.'),\n});\nexport type GenerateMedicineDetailsInput = z.infer<typeof GenerateMedicineDetailsInputSchema>;\n\nconst GenerateMedicineDetailsOutputSchema = z.object({\n  name: z.string().describe('The common name of the medicine.'),\n  composition: z.string().describe('The typical composition/active ingredients of the medicine.'),\n  usage: z.string().describe(\"Typical usage or indications for the medicine. Each point MUST start with '• ' (a bullet character followed by a space) and be on its own new line. For example:\\n• For pain relief\\n• Reduces fever\"),\n  manufacturer: z.string().describe(\"List a few common manufacturers of the medicine, specifically in India. Each point MUST start with '• ' (a bullet character followed by a space) and be on its own new line. For example:\\n• Cipla\\n• Sun Pharma\"),\n  dosage: z.string().describe(\"General dosage guidelines for the medicine. Each distinct guideline MUST be a separate bullet point on a new line, starting with '• '. For example:\\n• Adults: 1 tablet\\n• Children: Half tablet\"),\n  sideEffects: z.string().describe(\"Common side effects associated with the medicine. Each point MUST start with '• ' (a bullet character followed by a space) and be on its own new line. For example:\\n• Nausea\\n• Headache\"),\n  barcode: z.string().optional().describe('The barcode of the medicine, if applicable or provided in context.'),\n  mrp: z.union([z.string(), z.number()]).optional().describe('The MRP (Maximum Retail Price) of the medicine, typically in INR.'),\n  uom: z.string().optional().describe('The UOM (Unit of Measure) of the medicine, e.g., \"strip of 10 tablets\", \"100ml bottle\".'),\n  source: z.enum(['database_ai_enhanced', 'ai_generated', 'database_only', 'ai_unavailable', 'ai_failed']).describe('Indicates if the primary details were from a database and enhanced by AI, or if all details were AI-generated, or if only database details are available due to AI failure/unavailability.'),\n});\nexport type GenerateMedicineDetailsOutput = z.infer<typeof GenerateMedicineDetailsOutputSchema>;\n\n\nexport async function generateMedicineDetails(input: GenerateMedicineDetailsInput): Promise<GenerateMedicineDetailsOutput> {\n  console.log(\"🚀🚀🚀🚀🚀 ENTERING generateMedicineDetails WRAPPER 🚀🚀🚀🚀🚀\");\n  const languageToUse = input.language || 'en';\n  const t_fallback = getTranslations(languageToUse);\n  console.log(\"[generateMedicineDetails wrapper] Input received:\", JSON.stringify(input, null, 2));\n\n  if (!input || (typeof input.searchTermOrName !== 'string' || input.searchTermOrName.trim() === '') && (!input.contextName || !input.contextComposition)) {\n    console.warn(`[generateMedicineDetails wrapper] DETECTED INVALID OR EMPTY INPUT. Input: ${JSON.stringify(input)}`);\n    return {\n      name: input?.contextName || input?.searchTermOrName || t_fallback.infoNotAvailable,\n      composition: input?.contextComposition || t_fallback.infoNotAvailable,\n      usage: t_fallback.infoNotAvailable,\n      manufacturer: t_fallback.infoNotAvailable,\n      dosage: t_fallback.infoNotAvailable,\n      sideEffects: t_fallback.infoNotAvailable,\n      barcode: input?.contextBarcode,\n      mrp: input?.contextMrp,\n      uom: input?.contextUom,\n      source: 'ai_failed',\n    };\n  }\n\n  const nameForFallback = input.contextName || input.searchTermOrName || t_fallback.infoNotAvailable;\n\n  try {\n    console.log(\"🚀🚀🚀🚀🚀 CALLING generateMedicineDetailsFlow FROM WRAPPER 🚀🚀🚀🚀🚀\");\n    const result = await generateMedicineDetailsFlow(input);\n    console.log(\"🚀🚀🚀🚀🚀 RETURNED from generateMedicineDetailsFlow to WRAPPER. Result:\", JSON.stringify(result, null, 2));\n\n    if (result.source === 'ai_unavailable') {\n        console.warn(`[generateMedicineDetails wrapper] Flow indicated AI is unavailable (model/key issue). Input: ${JSON.stringify(input)}`);\n    }\n\n    const validatedResult = {\n        ...result,\n        name: result.name || nameForFallback,\n        composition: result.composition || input.contextComposition || t_fallback.infoNotAvailable,\n        mrp: result.mrp ?? input.contextMrp, // Ensure MRP from context is preferred if AI doesn't provide\n        uom: result.uom ?? input.contextUom,   // Ensure UOM from context is preferred\n    };\n    console.log(\"🚀🚀🚀🚀🚀 EXITING generateMedicineDetails WRAPPER with validated result:\", JSON.stringify(validatedResult, null, 2));\n    return validatedResult;\n\n  } catch (error: unknown) {\n    let rawErrorMessage = \"Unknown AI error during flow execution in wrapper.\";\n    let errorDetails = \"\";\n    if (error instanceof Error) {\n      rawErrorMessage = error.message;\n      errorDetails = error.stack || String(error);\n    } else if (typeof error === 'string') {\n      rawErrorMessage = error;\n      errorDetails = error;\n    } else if (error && typeof error === 'object' && 'message' in error) {\n      rawErrorMessage = String((error as any).message);\n      errorDetails = JSON.stringify(error);\n    }\n\n    console.error(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n    console.error(\"!!!!!!!! CATCH IN generateMedicineDetails WRAPPER !!!!!!!\");\n    console.error(`Input: ${JSON.stringify(input)}`);\n    console.error(`Message: ${rawErrorMessage}`);\n    console.error(`Details: ${errorDetails}`);\n    console.error(`Full Error Object:`, error);\n    console.error(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\n    const source: GenerateMedicineDetailsOutput['source'] = (input.contextName && input.contextComposition) ? 'database_only' : 'ai_failed';\n    const fallbackResult = {\n      name: nameForFallback,\n      composition: input.contextComposition || t_fallback.infoNotAvailable,\n      usage: t_fallback.infoNotAvailable,\n      manufacturer: t_fallback.infoNotAvailable,\n      dosage: t_fallback.infoNotAvailable,\n      sideEffects: t_fallback.infoNotAvailable,\n      barcode: input.contextBarcode,\n      mrp: input.contextMrp,\n      uom: input.contextUom,\n      source: source,\n    };\n    console.log(\"🚀🚀🚀🚀🚀 EXITING generateMedicineDetails WRAPPER with fallback due to CATCH:\", JSON.stringify(fallbackResult, null, 2));\n    return fallbackResult;\n  }\n}\n\nconst medicineDetailsPrompt = ai.definePrompt({\n  name: 'generateMedicineDetailsPrompt',\n  model: 'googleai/gemini-1.5-flash-latest',\n  input: {schema: GenerateMedicineDetailsInputSchema},\n  output: {schema: GenerateMedicineDetailsOutputSchema},\n  prompt: `You are a highly knowledgeable pharmaceutical AI assistant. Your goal is to provide comprehensive and accurate medicine details in the specified language: {{language}}.\nFormat all lists (usage, manufacturer, dosage, sideEffects) with each item on a NEW LINE, starting with '• ' (a bullet character followed by a space).\n\n{{#if contextComposition}}\nThe user has provided context for a medicine:\nIdentifier (Name/ID): \"{{contextName}}\"\nComposition: \"{{contextComposition}}\"\n{{#if contextBarcode}}Barcode: \"{{contextBarcode}}\"{{/if}}\n{{#if contextMrp}}MRP: \"{{contextMrp}}\"{{/if}}\n{{#if contextUom}}UOM: \"{{contextUom}}\"{{/if}}\n\nYour primary task is to use the provided 'Composition: \"{{contextComposition}}\"' to generate the following details for the medicine (identified as \"{{contextName}}\") in {{language}}:\n- usage: Provide typical usage/indications. Each point MUST start with '• ' and be on its own new line. (e.g., \"• For pain relief\\n• Reduces fever\").\n- manufacturer: List a few common INDIAN manufacturers. Each point MUST start with '• ' and be on its own new line. (e.g., \"• Cipla\\n• Sun Pharma\\n• Dr. Reddy's\").\n- dosage: Provide general dosage guidelines. Each distinct guideline MUST be a separate bullet point on a new line, starting with '• '. (e.g., \"• Adults: 1 tablet, 2-3 times a day\\n• Children (6-12 years): Half tablet, 2 times a day\\n• Do not exceed recommended dose\").\n- sideEffects: List common side effects. Each point MUST start with '• ' and be on its own new line. (e.g., \"• Nausea\\n• Headache\\n• Dizziness\").\n\nCRITICALLY, the output 'source' field MUST be \"database_ai_enhanced\".\nThe output 'name' field MUST be \"{{contextName}}\".\nThe output 'composition' field MUST be \"{{contextComposition}}\".\n{{#if contextBarcode}}The output 'barcode' field SHOULD be \"{{contextBarcode}}\".{{else}}If a common barcode is known for a medicine with this composition, provide it; otherwise, you can omit the 'barcode' field or leave it empty.{{/if}}\n{{#if contextMrp}}The output 'mrp' field SHOULD be \"{{contextMrp}}\".{{else}}If a typical MRP is known for this composition in India (INR), provide it; otherwise omit.{{/if}}\n{{#if contextUom}}The output 'uom' field SHOULD be \"{{contextUom}}\".{{else}}If a typical UOM (e.g., \"strip of 10 tablets\") is known, provide it; otherwise omit.{{/if}}\n\nIf you cannot find specific information for any of the generated fields (usage, manufacturer, dosage, sideEffects), PROVIDE AN EMPTY STRING for that field. Do NOT use phrases like 'Information not available' or 'Not found' yourself in these fields. The system will handle fallbacks for empty strings.\n\nExample for contextName=\"Paracetamol 500mg\", contextComposition=\"Paracetamol 500mg\", language=\"en\", contextMrp=\"20\", contextUom=\"Strip of 10 tablets\":\n  name: \"Paracetamol 500mg\"\n  composition: \"Paracetamol 500mg\"\n  usage: \"• For relief from fever\\n• To reduce mild to moderate pain\"\n  manufacturer: \"• GSK India\\n• Cipla Ltd.\\n• Ipca Laboratories Ltd.\"\n  dosage: \"• Adults: 1 to 2 tablets every 4-6 hours\\n• Max: 8 tablets in 24 hours\"\n  sideEffects: \"• Nausea (rare)\\n• Allergic reactions (very rare)\"\n  barcode: \"123456789012\"\n  mrp: \"20\"\n  uom: \"Strip of 10 tablets\"\n  source: \"database_ai_enhanced\"\n\n{{else}}\nThe user is searching for information related to: \"{{searchTermOrName}}\".\nThis term could be a medicine name, a partial name, a composition, or a barcode.\n\nFirst, try to identify the most likely specific medicine based on \"{{searchTermOrName}}\".\nThen, provide the following details for that identified medicine in {{language}}:\n- Common name (this should be your identified medicine name).\n- Typical composition/active ingredients.\n- Typical usage or indications. Each point MUST start with '• ' and be on its own new line. (e.g., \"• For pain relief\\n• Reduces fever\").\n- Common INDIAN manufacturers. Each point MUST start with '• ' and be on its own new line. (e.g., \"• Cipla\\n• Sun Pharma\\n• Dr. Reddy's\").\n- General dosage guidelines. Each distinct guideline MUST be a separate bullet point on a new line, starting with '• '. (e.g., \"• Adults: 1 tablet, 2-3 times a day\\n• Children (6-12 years): Half tablet, 2 times a day\").\n- Common side effects. Each point MUST start with '• ' and be on its own new line. (e.g., \"• Nausea\\n• Headache\\n• Dizziness\").\n- Barcode (if identifiable and applicable, otherwise omit or leave empty).\n- MRP (Maximum Retail Price in INR, if known or typical for the medicine).\n- UOM (Unit of Measure, e.g., \"strip of 10 tablets\", \"100ml bottle\", if known).\n\nIf \"{{searchTermOrName}}\" is a barcode, try to identify the medicine and its details.\nIf \"{{searchTermOrName}}\" seems to be a composition, describe a common medicine with that composition.\nIf you cannot confidently identify a specific medicine from \"{{searchTermOrName}}\", use \"{{searchTermOrName}}\" as the name if it seems like a product, or a generic phrase like \"Medicine based on '{{searchTermOrName}}'\" for the name field, and use the original \"{{searchTermOrName}}\" or its key components for the composition field.\nThe output 'source' field MUST be \"ai_generated\".\nPROVIDE AN EMPTY STRING for any detail field if information cannot be found. Do NOT use phrases like 'Information not available' or 'Not found' yourself in these fields.\n\nExample for searchTermOrName=\"Amoxicillin\", language=\"en\":\n  name: \"Amoxicillin\"\n  composition: \"Amoxicillin Trihydrate (e.g., 250mg or 500mg capsules)\"\n  usage: \"• Treats bacterial infections\\n• Used for ear, nose, throat infections\"\n  manufacturer: \"• Cipla Ltd.\\n• Mankind Pharma\\n• Alkem Laboratories\"\n  dosage: \"• Adults: 250mg to 500mg every 8 hours\\n• Children: Dosage based on weight\"\n  sideEffects: \"• Diarrhea\\n• Nausea\\n• Rash\"\n  barcode: \"\"\n  mrp: \"50\"\n  uom: \"Strip of 10 capsules\"\n  source: \"ai_generated\"\n{{/if}}\n\nEnsure all textual output (name, composition, usage, manufacturer, dosage, sideEffects, uom) is in {{language}}.\nThe 'source' field must be one of: 'database_ai_enhanced', 'ai_generated', as specified above. Do not use 'database_only', 'ai_unavailable', or 'ai_failed' in the direct AI response.\n`,\n});\n\nconst generateMedicineDetailsFlow = ai.defineFlow(\n  {\n    name: 'generateMedicineDetailsFlow',\n    inputSchema: GenerateMedicineDetailsInputSchema,\n    outputSchema: GenerateMedicineDetailsOutputSchema,\n  },\n  async (input: GenerateMedicineDetailsInput): Promise<GenerateMedicineDetailsOutput> => {\n    console.log(\"🔷🔷🔷🔷🔷 ENTERING generateMedicineDetailsFlow (ai.defineFlow) 🔷🔷🔷🔷🔷\");\n    console.log(\"[generateMedicineDetailsFlow] Input to flow:\", JSON.stringify(input, null, 2));\n\n    if (!process.env.GEMINI_API_KEY) {\n      console.error(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n      console.error(\"CRITICAL ERROR: GEMINI_API_KEY is NOT SET or accessible in generateMedicineDetailsFlow environment!\");\n      console.error(\"This flow WILL FAIL to contact Google AI services.\");\n      console.error(\"Please ensure GEMINI_API_KEY is correctly set in your .env file and the server is restarted.\");\n      console.error(\"Also, check that src/ai/genkit.ts is correctly initializing the googleAI plugin.\");\n      console.error(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n      const t_api_key_fallback = getTranslations(input.language || 'en');\n      return {\n        name: input.contextName || input.searchTermOrName || t_api_key_fallback.infoNotAvailable,\n        composition: input.contextComposition || t_api_key_fallback.infoNotAvailable,\n        usage: t_api_key_fallback.infoNotAvailable,\n        manufacturer: t_api_key_fallback.infoNotAvailable,\n        dosage: t_api_key_fallback.infoNotAvailable,\n        sideEffects: t_api_key_fallback.infoNotAvailable,\n        barcode: input.contextBarcode,\n        mrp: input.contextMrp,\n        uom: input.contextUom,\n        source: 'ai_unavailable',\n      };\n    } else {\n      console.log(\"[generateMedicineDetailsFlow] GEMINI_API_KEY appears to be set in the environment.\");\n    }\n\n\n    let rawOutputFromAI: GenerateMedicineDetailsOutput | null = null;\n    const t_flow_fallback = getTranslations(input.language || 'en');\n\n    try {\n      console.log(\"******************************************************************\");\n      console.log(\"[generateMedicineDetailsFlow] Attempting AI prompt call with medicineDetailsPrompt.\");\n      console.log(\"[generateMedicineDetailsFlow] Input being sent to AI prompt object:\", JSON.stringify(input, null, 2));\n      console.log(\"******************************************************************\");\n\n      const {output} = await medicineDetailsPrompt(input);\n      rawOutputFromAI = output;\n\n      console.log(\"******************************************************************\");\n      console.log(\"[generateMedicineDetailsFlow] AI Prompt Call Completed (or at least didn't throw an immediate error to this catch block).\");\n      console.log(\"[generateMedicineDetailsFlow] Value of rawOutputFromAI immediately after assignment:\",\n        rawOutputFromAI === null ? \"NULL_VALUE\" :\n        rawOutputFromAI === undefined ? \"UNDEFINED_VALUE\" :\n        JSON.stringify(rawOutputFromAI, null, 2)\n      );\n      console.log(\"******************************************************************\");\n\n\n      if (!rawOutputFromAI || typeof rawOutputFromAI.name !== 'string' || typeof rawOutputFromAI.composition !== 'string') {\n        console.warn(\n          \"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\",\n          \"\\n[generateMedicineDetailsFlow] CRITICAL ISSUE: AI returned invalid basic structure (e.g., null, undefined, or missing essential name/composition string fields).\",\n          \"\\nInput:\", JSON.stringify(input, null, 2),\n          \"\\nRaw Output as received:\", rawOutputFromAI === null ? \"NULL_VALUE\" : rawOutputFromAI === undefined ? \"UNDEFINED_VALUE\" : JSON.stringify(rawOutputFromAI, null, 2),\n          \"\\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"\n        );\n\n        const sourceForFailure: GenerateMedicineDetailsOutput['source'] = input.contextName ? 'database_only' : 'ai_failed';\n        return {\n            name: input.contextName || input.searchTermOrName || t_flow_fallback.infoNotAvailable,\n            composition: input.contextComposition || t_flow_fallback.infoNotAvailable,\n            usage: t_flow_fallback.infoNotAvailable,\n            manufacturer: t_flow_fallback.infoNotAvailable,\n            dosage: t_flow_fallback.infoNotAvailable,\n            sideEffects: t_flow_fallback.infoNotAvailable,\n            barcode: input.contextBarcode,\n            mrp: input.contextMrp,\n            uom: input.contextUom,\n            source: sourceForFailure,\n        };\n      }\n\n      console.log(\"[generateMedicineDetailsFlow] Raw AI Output (BEFORE further validation):\", JSON.stringify(rawOutputFromAI, null, 2));\n\n      let finalSource: GenerateMedicineDetailsOutput['source'];\n      let finalName: string;\n      let finalComposition: string;\n      let finalUsage: string;\n      let finalManufacturer: string;\n      let finalDosage: string;\n      let finalSideEffects: string;\n      let finalBarcode: string | undefined;\n      let finalMrp: string | number | undefined;\n      let finalUom: string | undefined;\n\n\n      if (input.contextName && input.contextComposition) {\n        finalName = input.contextName;\n        finalComposition = input.contextComposition;\n        finalBarcode = rawOutputFromAI.barcode?.trim() || input.contextBarcode || undefined;\n        finalMrp = rawOutputFromAI.mrp ?? input.contextMrp;\n        finalUom = rawOutputFromAI.uom?.trim() || input.contextUom || undefined;\n\n\n        if (rawOutputFromAI.source === 'database_ai_enhanced') {\n          finalSource = 'database_ai_enhanced';\n          finalUsage = (rawOutputFromAI.usage && rawOutputFromAI.usage.trim() !== '') ? rawOutputFromAI.usage.trim() : t_flow_fallback.infoNotAvailable;\n          finalManufacturer = (rawOutputFromAI.manufacturer && rawOutputFromAI.manufacturer.trim() !== '') ? rawOutputFromAI.manufacturer.trim() : t_flow_fallback.infoNotAvailable;\n          finalDosage = (rawOutputFromAI.dosage && rawOutputFromAI.dosage.trim() !== '') ? rawOutputFromAI.dosage.trim() : t_flow_fallback.infoNotAvailable;\n          finalSideEffects = (rawOutputFromAI.sideEffects && rawOutputFromAI.sideEffects.trim() !== '') ? rawOutputFromAI.sideEffects.trim() : t_flow_fallback.infoNotAvailable;\n\n\n          const anyDetailEnhanced =\n            (finalUsage !== t_flow_fallback.infoNotAvailable) ||\n            (finalManufacturer !== t_flow_fallback.infoNotAvailable) ||\n            (finalDosage !== t_flow_fallback.infoNotAvailable) ||\n            (finalSideEffects !== t_flow_fallback.infoNotAvailable) ||\n            (finalBarcode !== input.contextBarcode) || // Barcode can be enhanced\n            (finalMrp !== input.contextMrp) || // MRP can be enhanced\n            (finalUom !== input.contextUom);   // UOM can be enhanced\n\n\n          if (!anyDetailEnhanced && finalUsage === t_flow_fallback.infoNotAvailable && finalManufacturer === t_flow_fallback.infoNotAvailable && finalDosage === t_flow_fallback.infoNotAvailable && finalSideEffects === t_flow_fallback.infoNotAvailable ) {\n            console.log(\"[generateMedicineDetailsFlow] AI reported 'database_ai_enhanced' but provided no new textual details beyond context or fallbacks for usage, manufacturer, dosage, sideEffects. Downgrading to 'database_only'.\");\n            finalSource = 'database_only';\n          }\n\n        } else {\n          console.warn(`[generateMedicineDetailsFlow] In DB context path, AI returned source '${rawOutputFromAI.source}' instead of expected 'database_ai_enhanced'. Raw AI output: ${JSON.stringify(rawOutputFromAI)}. Falling back to database_only.`);\n          finalSource = 'database_only';\n          finalUsage = t_flow_fallback.infoNotAvailable;\n          finalManufacturer = t_flow_fallback.infoNotAvailable;\n          finalDosage = t_flow_fallback.infoNotAvailable;\n          finalSideEffects = t_flow_fallback.infoNotAvailable;\n          // Keep barcode, mrp, uom from context if AI path fails\n          finalBarcode = input.contextBarcode;\n          finalMrp = input.contextMrp;\n          finalUom = input.contextUom;\n        }\n      } else { // AI-only path\n        if (rawOutputFromAI.source === 'ai_generated' && rawOutputFromAI.name.trim() !== '' && rawOutputFromAI.composition.trim() !== '') {\n          finalSource = 'ai_generated';\n          finalName = rawOutputFromAI.name.trim();\n          finalComposition = rawOutputFromAI.composition.trim();\n          finalUsage = (rawOutputFromAI.usage && rawOutputFromAI.usage.trim() !== '') ? rawOutputFromAI.usage.trim() : t_flow_fallback.infoNotAvailable;\n          finalManufacturer = (rawOutputFromAI.manufacturer && rawOutputFromAI.manufacturer.trim() !== '') ? rawOutputFromAI.manufacturer.trim() : t_flow_fallback.infoNotAvailable;\n          finalDosage = (rawOutputFromAI.dosage && rawOutputFromAI.dosage.trim() !== '') ? rawOutputFromAI.dosage.trim() : t_flow_fallback.infoNotAvailable;\n          finalSideEffects = (rawOutputFromAI.sideEffects && rawOutputFromAI.sideEffects.trim() !== '') ? rawOutputFromAI.sideEffects.trim() : t_flow_fallback.infoNotAvailable;\n          finalBarcode = rawOutputFromAI.barcode?.trim() || undefined;\n          finalMrp = rawOutputFromAI.mrp;\n          finalUom = rawOutputFromAI.uom?.trim() || undefined;\n        } else {\n          console.warn(`[generateMedicineDetailsFlow] In AI-only path, AI returned source '${rawOutputFromAI.source}' or missing name/composition. Expected 'ai_generated' with non-empty name/composition. Raw AI output: ${JSON.stringify(rawOutputFromAI)}. Falling back to ai_failed.`);\n          finalSource = 'ai_failed';\n          finalName = input.searchTermOrName || t_flow_fallback.infoNotAvailable;\n          if (rawOutputFromAI.name && rawOutputFromAI.name.trim() !== '') finalName = rawOutputFromAI.name.trim();\n          finalComposition = (rawOutputFromAI.composition && rawOutputFromAI.composition.trim() !== '') ? rawOutputFromAI.composition.trim() : t_flow_fallback.infoNotAvailable;\n\n          finalUsage = t_flow_fallback.infoNotAvailable;\n          finalManufacturer = t_flow_fallback.infoNotAvailable;\n          finalDosage = t_flow_fallback.infoNotAvailable;\n          finalSideEffects = t_flow_fallback.infoNotAvailable;\n          finalBarcode = undefined;\n          finalMrp = undefined;\n          finalUom = undefined;\n        }\n      }\n\n      const validatedOutput: GenerateMedicineDetailsOutput = {\n        name: finalName,\n        composition: finalComposition,\n        usage: finalUsage,\n        manufacturer: finalManufacturer,\n        dosage: finalDosage,\n        sideEffects: finalSideEffects,\n        barcode: finalBarcode,\n        mrp: finalMrp,\n        uom: finalUom,\n        source: finalSource,\n      };\n\n      console.log(\"[generateMedicineDetailsFlow] Validated Output to be returned:\", JSON.stringify(validatedOutput, null, 2));\n      console.log(\"🔷🔷🔷🔷🔷 EXITING generateMedicineDetailsFlow (ai.defineFlow) - SUCCESS PATH 🔷🔷🔷🔷🔷\");\n      return validatedOutput;\n\n    } catch (flowError: any) {\n        console.error(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n        console.error(\"!!!!!!!!!!!!!!!!! CRITICAL ERROR IN generateMedicineDetailsFlow CATCH BLOCK !!!!!!!!!!!!!!!!!!\");\n        console.error(`Input that caused error: ${JSON.stringify(input)}`);\n\n        let errorToLog = flowError;\n        if (flowError && flowError.cause instanceof Error) {\n          console.error(\"Original Cause of Error:\", flowError.cause.message, flowError.cause.stack);\n          errorToLog = flowError.cause;\n        }\n\n        console.error(`Error Type: ${errorToLog.name || 'Unknown type'}`);\n        console.error(`Error Message: ${errorToLog.message || 'No message available'}`);\n        console.error(`Error Stack: ${errorToLog.stack || 'No stack trace available'}`);\n\n        if (errorToLog.response && errorToLog.response.data) console.error(\"Error Response Data (from original error):\", errorToLog.response.data);\n\n        console.error(`Full Error Object (potentially wrapped):`, JSON.stringify(flowError, Object.getOwnPropertyNames(flowError), 2));\n        console.error(`Raw AI Output (if available from before error): ${rawOutputFromAI === null ? \"NULL_VALUE\" : rawOutputFromAI === undefined ? \"UNDEFINED_VALUE\" : JSON.stringify(rawOutputFromAI, null, 2)}`);\n        console.error(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\n\n        let sourceForError: GenerateMedicineDetailsOutput['source'] = (input.contextName && input.contextComposition) ? 'database_only' : 'ai_failed';\n\n        if (errorToLog.message) {\n            const lowerMessage = errorToLog.message.toLowerCase();\n            if (lowerMessage.includes('api key not valid') || lowerMessage.includes('user location is not supported') || lowerMessage.includes('api_key_invalid') || lowerMessage.includes('api key is invalid') || lowerMessage.includes('permission') || lowerMessage.includes('denied')) {\n              console.error(`[generateMedicineDetailsFlow] Categorized Error: Probable API key, permission, or configuration issue: ${errorToLog.message}`);\n              sourceForError = 'ai_unavailable';\n            } else if (lowerMessage.includes('model not found') || lowerMessage.includes('could not find model') || lowerMessage.includes('404 not found')) {\n              console.error(`[generateMedicineDetailsFlow] Categorized Error: AI model not found or configured: ${errorToLog.message}`);\n              sourceForError = 'ai_unavailable';\n            } else if (lowerMessage.includes('billing account not found') || lowerMessage.includes('billing issues')) {\n                 console.error(`[generateMedicineDetailsFlow] Categorized Error: Billing issue: ${errorToLog.message}`);\n                 sourceForError = 'ai_unavailable';\n            } else if (lowerMessage.includes(\"failed to fetch\") || lowerMessage.includes(\"network error\")) {\n                console.error(`[generateMedicineDetailsFlow] Categorized Error: Network issue or AI service unreachable: ${errorToLog.message}`);\n                sourceForError = 'ai_failed';\n            } else if (errorToLog.name === 'ZodError') {\n                console.error(`[generateMedicineDetailsFlow] Categorized Error: Zod validation error on AI output: ${errorToLog.message}. Details:`, (errorToLog as any).errors);\n                sourceForError = 'ai_failed';\n            }\n        }\n\n        const errorFallbackResult = {\n            name: input.contextName || input.searchTermOrName || t_flow_fallback.infoNotAvailable,\n            composition: input.contextComposition || t_flow_fallback.infoNotAvailable,\n            usage: t_flow_fallback.infoNotAvailable,\n            manufacturer: t_flow_fallback.infoNotAvailable,\n            dosage: t_flow_fallback.infoNotAvailable,\n            sideEffects: t_flow_fallback.infoNotAvailable,\n            barcode: input.contextBarcode,\n            mrp: input.contextMrp,\n            uom: input.contextUom,\n            source: sourceForError,\n        };\n        console.log(\"🔷🔷🔷🔷🔷 EXITING generateMedicineDetailsFlow (ai.defineFlow) - CATCH PATH 🔷🔷🔷🔷🔷\", JSON.stringify(errorFallbackResult, null, 2));\n        return errorFallbackResult;\n    }\n  }\n);\n"],"names":[],"mappings":";;;;;IA4CsB","debugId":null}},
    {"offset": {"line": 264, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase.ts"],"sourcesContent":["\nimport { initializeApp, getApps, type FirebaseApp } from 'firebase/app';\nimport { getDatabase, type Database } from 'firebase/database';\nimport { getAuth, type Auth } from \"firebase/auth\";\n\n// Your web app's Firebase configuration\n// Ensure these environment variables are set in your .env.local file\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n  databaseURL: process.env.NEXT_PUBLIC_FIREBASE_DATABASE_URL,\n};\n\nexport let app: FirebaseApp | undefined = undefined;\nexport let db: Database | undefined = undefined;\nexport let auth: Auth | undefined = undefined;\n\nlet initializationErrorDetails = \"\";\n\nconst requiredEnvVarKeys: (keyof typeof firebaseConfig)[] = [\n  'apiKey',\n  'authDomain',\n  'projectId',\n  'storageBucket',\n  'messagingSenderId',\n  'appId',\n  'databaseURL',\n];\n\nconst missingVars = requiredEnvVarKeys.filter(key => !firebaseConfig[key]);\n\nif (missingVars.length > 0) {\n  initializationErrorDetails =\n    '🔴 Firebase Initialization Error: The following required environment variables are missing or undefined:\\n' +\n    missingVars.map(key => {\n        const envVarName = `NEXT_PUBLIC_FIREBASE_${key.replace(/([A-Z])/g, '_$1').toUpperCase()}`;\n        return `- ${envVarName}`;\n    }).join('\\n') +\n    '\\n👉 Please ensure these are set in your .env.local file (especially NEXT_PUBLIC_FIREBASE_DATABASE_URL for Realtime Database) and the development server is restarted.' +\n    '\\nFirebase functionality will be impaired.';\n  console.error(initializationErrorDetails);\n}\n\nif (!initializationErrorDetails) {\n  try {\n    if (!getApps().length) {\n      app = initializeApp(firebaseConfig);\n    } else {\n      app = getApps()[0];\n    }\n\n    if (app) {\n      db = getDatabase(app);\n      auth = getAuth(app);\n    } else {\n      // This case should ideally not be reached if getApps().length check is robust\n      initializationErrorDetails = \"🔴 Firebase App object is undefined after initialization attempt. This is unexpected. Realtime Database and Auth cannot be initialized.\";\n      console.error(initializationErrorDetails);\n    }\n  } catch (e: any) {\n    initializationErrorDetails = `🔴 Firebase SDK Initialization Failed critically during app/db/auth setup: ${e.message || e}`;\n    console.error(initializationErrorDetails);\n    // Ensure these are undefined if an error occurs\n    app = undefined;\n    db = undefined;\n    auth = undefined;\n  }\n}\n\n// Post-initialization checks, only if no major error occurred before this stage\nif (!initializationErrorDetails) {\n  if (!db) {\n    console.error(\n      \"🔴 CRITICAL: Firebase Realtime Database instance (db) is UNDEFINED after Firebase App initialization.\\n\" +\n      \"   This usually means `getDatabase(app)` failed or an issue with the `databaseURL`.\\n\" +\n      \"   Realtime Database operations (reading/writing data) WILL FAIL. Check the following:\\n\" +\n      \"   1. Environment Variables: Ensure NEXT_PUBLIC_FIREBASE_DATABASE_URL in '.env.local' is correct and points to your Realtime Database, then restart the server.\\n\" +\n      \"   2. Realtime Database Setup: Verify that Realtime Database is created and enabled in your Firebase project (Firebase console -> Realtime Database).\\n\" +\n      \"   3. Security Rules: Your Realtime Database security rules (Firebase console -> Realtime Database -> Rules) might be blocking access. For initial development, you might use permissive rules like:\\n\" +\n      \"      {\\n\" +\n      \"        \\\"rules\\\": {\\n\" +\n      \"          \\\".read\\\": \\\"auth != null\\\", // Or true for public read\\n\" +\n      \"          \\\".write\\\": \\\"auth != null\\\" // Or true for public write\\n\" +\n      \"        }\\n\" +\n      \"      }\\n\" +\n      \"      IMPORTANT: Secure these rules properly before deploying to production!\\n\" +\n      \"   4. API Key Restrictions (Google Cloud Console -> APIs & Services -> Credentials):\\n\" +\n      \"      - Select your API key.\\n\" +\n      \"      - Under 'API restrictions', if 'Restrict key' is selected, ensure 'Firebase Realtime Database API' is in the list of allowed APIs.\\n\" +\n      \"      - Under 'Application restrictions', if 'HTTP referrers' is set, ensure your development URL (e.g., http://localhost:XXXX) is allowed.\"\n    );\n  }\n  if (!auth) {\n    console.error(\n      \"🔴 CRITICAL: Firebase Auth instance (auth) is UNDEFINED after Firebase App initialization.\\n\" +\n      \"   This usually means `getAuth(app)` failed.\\n\" +\n      \"   Authentication WILL FAIL. Check the following:\\n\" +\n      \"   1. Environment Variables: Ensure all NEXT_PUBLIC_FIREBASE_... auth-related variables in '.env.local' are correct and the server was restarted.\\n\" +\n      \"   2. Firebase Authentication Setup: Verify that Authentication (especially Email/Password sign-in provider if used) is enabled in the Firebase console (Firebase console -> Authentication -> Sign-in method).\\n\" +\n      \"   3. API Key Restrictions (Google Cloud Console -> APIs & Services -> Credentials):\\n\" +\n      \"      - Select your API key.\\n\" +\n      \"      - Ensure 'Identity Toolkit API' is in the list of allowed APIs if restrictions are applied.\"\n    );\n  }\n} else {\n    // If initializationErrorDetails is set, app/db/auth might be undefined.\n    // The primary error has already been logged.\n    // Adding a note that services might be unavailable due to the earlier error.\n    if (!app) console.warn(\"⚠️ Firebase App instance is undefined due to earlier initialization errors.\");\n    if (!db) console.warn(\"⚠️ Firebase Realtime Database (db) instance is undefined due to earlier initialization errors.\");\n    if (!auth) console.warn(\"⚠️ Firebase Auth (auth) instance is undefined due to earlier initialization errors.\");\n}\n"],"names":[],"mappings":";;;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;;;;AAEA,wCAAwC;AACxC,qEAAqE;AACrE,MAAM,iBAAiB;IACrB,MAAM;IACN,UAAU;IACV,SAAS;IACT,aAAa;IACb,iBAAiB;IACjB,KAAK;IACL,WAAW;AACb;AAEO,IAAI,MAA+B;AACnC,IAAI,KAA2B;AAC/B,IAAI,OAAyB;AAEpC,IAAI,6BAA6B;AAEjC,MAAM,qBAAsD;IAC1D;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAED,MAAM,cAAc,mBAAmB,MAAM,CAAC,CAAA,MAAO,CAAC,cAAc,CAAC,IAAI;AAEzE,IAAI,YAAY,MAAM,GAAG,GAAG;IAC1B,6BACE,+GACA,YAAY,GAAG,CAAC,CAAA;QACZ,MAAM,aAAa,CAAC,qBAAqB,EAAE,IAAI,OAAO,CAAC,YAAY,OAAO,WAAW,IAAI;QACzF,OAAO,CAAC,EAAE,EAAE,YAAY;IAC5B,GAAG,IAAI,CAAC,QACR,2KACA;IACF,QAAQ,KAAK,CAAC;AAChB;AAEA,IAAI,CAAC,4BAA4B;IAC/B,IAAI;QACF,IAAI,CAAC,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,EAAE;YACrB,MAAM,CAAA,GAAA,oLAAA,CAAA,gBAAa,AAAD,EAAE;QACtB,OAAO;YACL,MAAM,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,GAAG,CAAC,EAAE;QACpB;QAEA,IAAI,KAAK;YACP,KAAK,CAAA,GAAA,qLAAA,CAAA,cAAW,AAAD,EAAE;YACjB,OAAO,CAAA,GAAA,yOAAA,CAAA,UAAO,AAAD,EAAE;QACjB,OAAO;YACL,8EAA8E;YAC9E,6BAA6B;YAC7B,QAAQ,KAAK,CAAC;QAChB;IACF,EAAE,OAAO,GAAQ;QACf,6BAA6B,CAAC,2EAA2E,EAAE,EAAE,OAAO,IAAI,GAAG;QAC3H,QAAQ,KAAK,CAAC;QACd,gDAAgD;QAChD,MAAM;QACN,KAAK;QACL,OAAO;IACT;AACF;AAEA,gFAAgF;AAChF,IAAI,CAAC,4BAA4B;IAC/B,IAAI,CAAC,IAAI;QACP,QAAQ,KAAK,CACX,4GACA,0FACA,6FACA,sKACA,4JACA,2MACA,cACA,2BACA,wEACA,yEACA,gBACA,cACA,mFACA,2FACA,mCACA,+IACA;IAEJ;IACA,IAAI,CAAC,MAAM;QACT,QAAQ,KAAK,CACX,iGACA,mDACA,wDACA,wJACA,sNACA,2FACA,mCACA;IAEJ;AACF,OAAO;IACH,wEAAwE;IACxE,6CAA6C;IAC7C,6EAA6E;IAC7E,IAAI,CAAC,KAAK,QAAQ,IAAI,CAAC;IACvB,IAAI,CAAC,IAAI,QAAQ,IAAI,CAAC;IACtB,IAAI,CAAC,MAAM,QAAQ,IAAI,CAAC;AAC5B","debugId":null}},
    {"offset": {"line": 356, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mockApi.ts"],"sourcesContent":["\nimport type { Medicine } from '@/types';\nimport { db } from './firebase';\nimport { ref, get, child, query as dbQuery, orderByChild, equalTo, limitToFirst, startAt, endAt } from 'firebase/database';\n\ninterface DbMedicineResult {\n  id: string;\n  name: string;\n  composition: string;\n  barcode?: string;\n  mrp?: string | number;\n  uom?: string;\n  foundInDb: true;\n}\n\n// Helper function to check if a term might be a barcode\nconst isPotentiallyBarcode = (term: string): boolean => {\n  return /^\\d{8,14}$/.test(term);\n};\n\n\nexport const fetchMedicineByName = async (\n  searchTerm: string\n): Promise<DbMedicineResult[]> => {\n  if (!db) {\n    console.warn(\"[mockApi] Firebase Realtime Database (db) is not initialized. Cannot fetch from DB.\");\n    return [];\n  }\n  if (!searchTerm || searchTerm.trim() === \"\") {\n    return [];\n  }\n\n  const normalizedAiEnhancedSearchTerm = searchTerm.toLowerCase().trim();\n  const originalSearchTermTrimmed = searchTerm.trim();\n  const medicinesRef = ref(db, 'medicines');\n  const allMatches: DbMedicineResult[] = [];\n  const foundIds = new Set<string>();\n\n  const potentialIdsToTry = new Set<string>();\n  potentialIdsToTry.add(normalizedAiEnhancedSearchTerm.replace(/\\s+/g, '-'));\n  potentialIdsToTry.add(originalSearchTermTrimmed.replace(/\\s+/g, '-'));\n  potentialIdsToTry.add(originalSearchTermTrimmed);\n\n  for (const potentialId of potentialIdsToTry) {\n    if (!potentialId.match(/^[a-zA-Z0-9-_]+$/)) continue;\n    try {\n      const directIdSnapshot = await get(child(medicinesRef, potentialId));\n      if (directIdSnapshot.exists()) {\n        const data = directIdSnapshot.val();\n        if (data && data.name && data.composition && !foundIds.has(potentialId)) {\n          allMatches.push({\n            id: directIdSnapshot.key!,\n            name: data.name,\n            composition: data.composition,\n            barcode: data.barcode,\n            mrp: data.mrp,\n            uom: data.uom,\n            foundInDb: true,\n          });\n          foundIds.add(potentialId);\n          return allMatches;\n        }\n      }\n    } catch (e: any) {\n      console.error(`[mockApi] Error fetching medicine by direct ID '${potentialId}':`, e.message);\n    }\n  }\n\n  if (isPotentiallyBarcode(originalSearchTermTrimmed)) {\n    try {\n      const barcodeQueryInstance = dbQuery(medicinesRef, orderByChild('barcode'), equalTo(originalSearchTermTrimmed));\n      const barcodeSnapshot = await get(barcodeQueryInstance);\n      if (barcodeSnapshot.exists()) {\n        const data = barcodeSnapshot.val();\n        Object.keys(data).forEach(id => {\n          const medicine = data[id];\n          if (medicine && medicine.name && medicine.composition && !foundIds.has(id)) {\n            allMatches.push({\n              id,\n              name: medicine.name,\n              composition: medicine.composition,\n              barcode: medicine.barcode,\n              mrp: medicine.mrp,\n              uom: medicine.uom,\n              foundInDb: true,\n            });\n            foundIds.add(id);\n          }\n        });\n         if (allMatches.length > 0) return allMatches;\n      }\n    }\n    catch (e: any)\n    {\n      console.error(`[mockApi] Error fetching medicine by barcode '${originalSearchTermTrimmed}':`, e.message);\n      if (e.message?.toLowerCase().includes(\"indexon\") || e.message?.toLowerCase().includes(\"orderbychild\")) {\n          console.error(\n            \"🔴 IMPORTANT: Firebase Realtime Database: Query by 'barcode' failed likely due to a missing index. \" +\n            \"Please add an index for 'barcode' in your Realtime Database security rules for efficient querying: \\n\" +\n            \"{\\n\" +\n            \"  \\\"rules\\\": {\\n\" +\n            \"    \\\"medicines\\\": {\\n\" +\n            \"      \\\".indexOn\\\": [\\\"barcode\\\", \\\"name_lowercase\\\"] // Ensure 'barcode' is listed here (and 'name_lowercase' if used elsewhere)\\n\" +\n            \"    }\\n\" +\n            \"    // ... your other rules ...\\n\" +\n            \"  }\\n\" +\n            \"}\"\n          );\n      }\n    }\n  }\n\n  try {\n    const allMedicinesSnapshot = await get(medicinesRef);\n    if (allMedicinesSnapshot.exists()) {\n      const medicinesData = allMedicinesSnapshot.val();\n\n      for (const id in medicinesData) {\n        if (foundIds.has(id)) continue;\n\n        const medicine = medicinesData[id];\n        if (!medicine || typeof medicine.name !== 'string' || typeof medicine.composition !== 'string') {\n          continue;\n        }\n\n        const currentMedicineNameLower = medicine.name.toLowerCase();\n        const currentMedicineCompositionLower = medicine.composition.toLowerCase();\n\n        // Normalize search term parts for \"includes\" check\n        const searchTermsParts = normalizedAiEnhancedSearchTerm.split(/\\s+/).filter(part => part.length > 1); // Split and filter small parts\n\n        const nameMatches = searchTermsParts.every(part => currentMedicineNameLower.includes(part));\n        const compositionMatches = searchTermsParts.every(part => currentMedicineCompositionLower.includes(part));\n\n        if (currentMedicineNameLower === normalizedAiEnhancedSearchTerm || nameMatches) {\n          if (!foundIds.has(id)) {\n            allMatches.push({ id, name: medicine.name, composition: medicine.composition, barcode: medicine.barcode, mrp: medicine.mrp, uom: medicine.uom, foundInDb: true });\n            foundIds.add(id);\n          }\n        } else if (compositionMatches) {\n           if (!foundIds.has(id)) {\n             allMatches.push({ id, name: medicine.name, composition: medicine.composition, barcode: medicine.barcode, mrp: medicine.mrp, uom: medicine.uom, foundInDb: true });\n             foundIds.add(id);\n           }\n        }\n      }\n    }\n  } catch (e: any) {\n      console.error(`[mockApi] Error during full scan for name/composition query (normalized term: '${normalizedAiEnhancedSearchTerm}'):`, e.message);\n  }\n  return allMatches;\n};\n\n\nexport const fetchSuggestions = async (query: string): Promise<string[]> => {\n  if (!db || query.trim().length < 2) { // Minimum 2 chars for suggestions\n    return [];\n  }\n  const normalizedQuery = query.toLowerCase().trim();\n  const medicinesRef = ref(db, 'medicines');\n  const suggestions: string[] = [];\n  const addedSuggestions = new Set<string>(); // To avoid duplicate suggestion strings\n\n  try {\n    const snapshot = await get(medicinesRef);\n    if (snapshot.exists()) {\n      const medicinesData = snapshot.val();\n      for (const id in medicinesData) {\n        if (suggestions.length >= 7) break; // Limit suggestions\n\n        const medicine = medicinesData[id];\n        if (medicine && typeof medicine.name === 'string') {\n          const lowerName = medicine.name.toLowerCase();\n          if (lowerName.startsWith(normalizedQuery) && !addedSuggestions.has(medicine.name)) {\n            suggestions.push(medicine.name);\n            addedSuggestions.add(medicine.name);\n          }\n        }\n        if (suggestions.length >= 7) break;\n        if (medicine && typeof medicine.composition === 'string') {\n            const lowerComposition = medicine.composition.toLowerCase();\n            if (lowerComposition.includes(normalizedQuery) && !addedSuggestions.has(medicine.composition) && suggestions.length < 7) {\n                 if (!addedSuggestions.has(medicine.composition)) {\n                    suggestions.push(medicine.composition);\n                    addedSuggestions.add(medicine.composition);\n                 }\n            }\n        }\n      }\n    }\n  } catch (error) {\n    console.error(\"[mockApi] Error fetching suggestions:\", error);\n  }\n  return suggestions.slice(0, 7); // Ensure limit\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 535, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,4VACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 595, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/dropdown-menu.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 793, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/medisearch/LanguageSelector.tsx"],"sourcesContent":["\n\"use client\";\n\nimport type { Language } from \"@/types\";\nimport type { TranslationKeys } from \"@/lib/translations\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Languages } from \"lucide-react\";\n\ninterface LanguageSelectorProps {\n  selectedLanguage: Language;\n  onLanguageChange: (lang: Language) => void;\n  t: TranslationKeys;\n}\n\nexport function LanguageSelector({\n  selectedLanguage,\n  onLanguageChange,\n  t,\n}: LanguageSelectorProps) {\n  const getCurrentLanguageName = (lang: Language, translations: TranslationKeys) => {\n    switch (lang) {\n      case \"en\":\n        return translations.english;\n      case \"hi\":\n        return translations.hindi;\n      case \"bn\":\n        return translations.bengali;\n      default:\n        return \"\";\n    }\n  };\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button \n          variant=\"ghost\" \n          className=\"text-foreground hover:bg-primary/10 hover:text-primary focus-visible:ring-ring\"\n        >\n          <Languages className=\"mr-2 h-5 w-5\" />\n          {getCurrentLanguageName(selectedLanguage, t)}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"bg-card border-border shadow-lg\">\n        <DropdownMenuItem\n          onSelect={() => onLanguageChange(\"en\")}\n          className=\"cursor-pointer hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground\"\n        >\n          {t.english}\n        </DropdownMenuItem>\n        <DropdownMenuItem\n          onSelect={() => onLanguageChange(\"hi\")}\n          className=\"cursor-pointer hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground\"\n        >\n          {t.hindi}\n        </DropdownMenuItem>\n        <DropdownMenuItem\n          onSelect={() => onLanguageChange(\"bn\")}\n          className=\"cursor-pointer hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground\"\n        >\n          {t.bengali}\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n\n"],"names":[],"mappings":";;;;AAKA;AACA;AAMA;AAXA;;;;;AAmBO,SAAS,iBAAiB,EAC/B,gBAAgB,EAChB,gBAAgB,EAChB,CAAC,EACqB;IACtB,MAAM,yBAAyB,CAAC,MAAgB;QAC9C,OAAQ;YACN,KAAK;gBACH,OAAO,aAAa,OAAO;YAC7B,KAAK;gBACH,OAAO,aAAa,KAAK;YAC3B,KAAK;gBACH,OAAO,aAAa,OAAO;YAC7B;gBACE,OAAO;QACX;IACF;IAEA,qBACE,8OAAC,4IAAA,CAAA,eAAY;;0BACX,8OAAC,4IAAA,CAAA,sBAAmB;gBAAC,OAAO;0BAC1B,cAAA,8OAAC,kIAAA,CAAA,SAAM;oBACL,SAAQ;oBACR,WAAU;;sCAEV,8OAAC,4MAAA,CAAA,YAAS;4BAAC,WAAU;;;;;;wBACpB,uBAAuB,kBAAkB;;;;;;;;;;;;0BAG9C,8OAAC,4IAAA,CAAA,sBAAmB;gBAAC,OAAM;gBAAM,WAAU;;kCACzC,8OAAC,4IAAA,CAAA,mBAAgB;wBACf,UAAU,IAAM,iBAAiB;wBACjC,WAAU;kCAET,EAAE,OAAO;;;;;;kCAEZ,8OAAC,4IAAA,CAAA,mBAAgB;wBACf,UAAU,IAAM,iBAAiB;wBACjC,WAAU;kCAET,EAAE,KAAK;;;;;;kCAEV,8OAAC,4IAAA,CAAA,mBAAgB;wBACf,UAAU,IAAM,iBAAiB;wBACjC,WAAU;kCAET,EAAE,OAAO;;;;;;;;;;;;;;;;;;AAKpB","debugId":null}},
    {"offset": {"line": 895, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,8OAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 924, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/medisearch/SuggestionsList.tsx"],"sourcesContent":["\"use client\";\n\nimport React from 'react';\n\ninterface SuggestionsListProps {\n  suggestions: string[];\n  onSuggestionClick: (suggestion: string) => void;\n}\n\nexport function SuggestionsList({ suggestions, onSuggestionClick }: SuggestionsListProps) {\n  if (suggestions.length === 0) {\n    return null;\n  }\n\n  return (\n    <ul \n        className=\"absolute left-0 right-0 mt-1 w-full bg-card border border-border rounded-md shadow-xl max-h-60 overflow-y-auto z-50\"\n        role=\"listbox\"\n    >\n      {suggestions.map((suggestion, index) => (\n        <li\n          key={index}\n          className=\"px-4 py-2 hover:bg-accent hover:text-accent-foreground cursor-pointer text-sm text-foreground\"\n          onClick={() => onSuggestionClick(suggestion)}\n          role=\"option\"\n          aria-selected=\"false\" // This could be enhanced with keyboard navigation\n        >\n          {suggestion}\n        </li>\n      ))}\n    </ul>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;AASO,SAAS,gBAAgB,EAAE,WAAW,EAAE,iBAAiB,EAAwB;IACtF,IAAI,YAAY,MAAM,KAAK,GAAG;QAC5B,OAAO;IACT;IAEA,qBACE,8OAAC;QACG,WAAU;QACV,MAAK;kBAEN,YAAY,GAAG,CAAC,CAAC,YAAY,sBAC5B,8OAAC;gBAEC,WAAU;gBACV,SAAS,IAAM,kBAAkB;gBACjC,MAAK;gBACL,iBAAc,QAAQ,kDAAkD;;0BAEvE;eANI;;;;;;;;;;AAWf","debugId":null}},
    {"offset": {"line": 961, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/medisearch/SearchBar.tsx"],"sourcesContent":["\"use client\";\n\nimport React from \"react\";\nimport type { TranslationKeys } from \"@/lib/translations\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Search, Loader2 } from \"lucide-react\";\nimport { SuggestionsList } from \"./SuggestionsList\";\n\n\ninterface SearchBarProps {\n  searchQuery: string;\n  onSearchQueryChange: (query: string) => void;\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\n  isLoading: boolean;\n  t: TranslationKeys;\n  suggestions: string[];\n  showSuggestions: boolean;\n  onSuggestionClick: (suggestion: string) => void;\n  onInputFocus: () => void;\n  onInputBlur: () => void;\n}\n\nexport function SearchBar({\n  searchQuery,\n  onSearchQueryChange,\n  onSubmit,\n  isLoading,\n  t,\n  suggestions,\n  showSuggestions,\n  onSuggestionClick,\n  onInputFocus,\n  onInputBlur,\n}: SearchBarProps) {\n  return (\n    <div className=\"relative w-full max-w-lg\">\n      <form onSubmit={onSubmit} className=\"flex w-full items-center space-x-2\">\n        <Input\n          type=\"text\"\n          value={searchQuery}\n          onChange={(e) => onSearchQueryChange(e.target.value)}\n          onFocus={onInputFocus}\n          onBlur={onInputBlur}\n          placeholder={t.searchPlaceholder}\n          className=\"flex-grow text-base\"\n          aria-label={t.searchPlaceholder}\n          disabled={isLoading}\n          autoComplete=\"off\" // Disable browser autocomplete to prefer our suggestions\n        />\n        <Button type=\"submit\" disabled={isLoading || !searchQuery.trim()} className=\"min-w-[100px]\">\n          {isLoading ? (\n            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n          ) : (\n            <Search className=\"mr-2 h-4 w-4\" />\n          )}\n          {t.searchButton}\n        </Button>\n      </form>\n      {showSuggestions && suggestions.length > 0 && (\n        <SuggestionsList suggestions={suggestions} onSuggestionClick={onSuggestionClick} />\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAIA;AACA;AACA;AAAA;AACA;AAPA;;;;;;AAuBO,SAAS,UAAU,EACxB,WAAW,EACX,mBAAmB,EACnB,QAAQ,EACR,SAAS,EACT,CAAC,EACD,WAAW,EACX,eAAe,EACf,iBAAiB,EACjB,YAAY,EACZ,WAAW,EACI;IACf,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAK,UAAU;gBAAU,WAAU;;kCAClC,8OAAC,iIAAA,CAAA,QAAK;wBACJ,MAAK;wBACL,OAAO;wBACP,UAAU,CAAC,IAAM,oBAAoB,EAAE,MAAM,CAAC,KAAK;wBACnD,SAAS;wBACT,QAAQ;wBACR,aAAa,EAAE,iBAAiB;wBAChC,WAAU;wBACV,cAAY,EAAE,iBAAiB;wBAC/B,UAAU;wBACV,cAAa,MAAM,yDAAyD;;;;;;kCAE9E,8OAAC,kIAAA,CAAA,SAAM;wBAAC,MAAK;wBAAS,UAAU,aAAa,CAAC,YAAY,IAAI;wBAAI,WAAU;;4BACzE,0BACC,8OAAC,iNAAA,CAAA,UAAO;gCAAC,WAAU;;;;;qDAEnB,8OAAC,sMAAA,CAAA,SAAM;gCAAC,WAAU;;;;;;4BAEnB,EAAE,YAAY;;;;;;;;;;;;;YAGlB,mBAAmB,YAAY,MAAM,GAAG,mBACvC,8OAAC,mJAAA,CAAA,kBAAe;gBAAC,aAAa;gBAAa,mBAAmB;;;;;;;;;;;;AAItE","debugId":null}},
    {"offset": {"line": 1052, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1133, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,8OAAC;QAAI,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE","debugId":null}},
    {"offset": {"line": 1175, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/medisearch/MedicineCard.tsx"],"sourcesContent":["\n\"use client\";\n\nimport type { Medicine } from \"@/types\";\nimport type { TranslationKeys } from \"@/lib/translations\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardFooter,\n} from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Barcode, Pill, Factory, AlertTriangle, ClipboardList, Stethoscope, Info, IndianRupee, Package } from \"lucide-react\";\n\ninterface MedicineCardProps {\n  medicine: Medicine;\n  t: TranslationKeys;\n}\n\nexport function MedicineCard({ medicine, t }: MedicineCardProps) {\n  const detailItemClass = \"text-sm font-medium text-foreground/80\";\n  const detailValueClass = \"text-base text-foreground\";\n  const multiLineDetailValueClass = `${detailValueClass} whitespace-pre-line`;\n\n  let sourceMessage = \"\";\n  switch (medicine.source) {\n    case 'database_ai_enhanced':\n      sourceMessage = t.sourceDbAiMessage;\n      break;\n    case 'ai_generated':\n      sourceMessage = t.sourceAiOnlyMessage;\n      break;\n    case 'database_only':\n      sourceMessage = t.sourceDbOnlyMessage;\n      break;\n    case 'ai_unavailable':\n      sourceMessage = t.sourceAiUnavailableForDetailsMessage(medicine.name);\n      break;\n    case 'ai_failed':\n      sourceMessage = t.sourceAiFailedForDetailsMessage(medicine.name);\n      break;\n    default:\n      if (medicine.name && medicine.composition && medicine.usage === t.infoNotAvailable) {\n        sourceMessage = t.sourceDbOnlyMessage;\n      }\n  }\n\n\n  return (\n    <Card className=\"w-full max-w-lg shadow-lg transition-all duration-300 ease-in-out hover:shadow-xl\">\n      <CardHeader>\n        <CardTitle className=\"text-2xl font-semibold text-primary flex items-center mb-1\">\n          <Pill className=\"mr-2 h-7 w-7 flex-shrink-0\" />\n          <span className=\"break-words\">\n            {medicine.name}\n            {!medicine.id.startsWith('ai-') && (\n              <span className=\"text-sm font-normal text-muted-foreground ml-2\">({medicine.id})</span>\n            )}\n          </span>\n        </CardTitle>\n        <CardDescription className=\"text-sm text-muted-foreground\">\n          {t.resultsTitle}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div>\n          <h3 className={detailItemClass + \" flex items-center\"}>\n             <ClipboardList className=\"mr-2 h-4 w-4 text-primary\" /> {t.compositionLabel}\n          </h3>\n          <p className={detailValueClass}>{medicine.composition}</p>\n        </div>\n\n        {medicine.mrp != null && medicine.mrp !== t.infoNotAvailable && (\n          <div>\n            <h3 className={detailItemClass + \" flex items-center\"}>\n              <IndianRupee className=\"mr-2 h-4 w-4 text-primary\" /> {t.mrpLabel}\n            </h3>\n            <p className={detailValueClass}>₹{medicine.mrp}</p>\n          </div>\n        )}\n\n        {medicine.uom && medicine.uom !== t.infoNotAvailable && (\n          <div>\n            <h3 className={detailItemClass + \" flex items-center\"}>\n              <Package className=\"mr-2 h-4 w-4 text-primary\" /> {t.uomLabel}\n            </h3>\n            <p className={detailValueClass}>{medicine.uom}</p>\n          </div>\n        )}\n\n        <div>\n          <h3 className={detailItemClass + \" flex items-center\"}>\n            <Stethoscope className=\"mr-2 h-4 w-4 text-primary\" /> {t.usageLabel}\n          </h3>\n          <p className={multiLineDetailValueClass}>{medicine.usage}</p>\n        </div>\n        <div>\n          <h3 className={detailItemClass + \" flex items-center\"}>\n            <Factory className=\"mr-2 h-4 w-4 text-primary\" /> {t.manufacturerLabel}\n          </h3>\n          <p className={multiLineDetailValueClass}>{medicine.manufacturer}</p>\n        </div>\n        <div>\n          <h3 className={detailItemClass + \" flex items-center\"}>\n           <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-syringe mr-2 text-primary\"><path d=\"m18 2 4 4\"/><path d=\"m17 7 3-3\"/><path d=\"M19 9 8.7 19.3c-1 1-2.5 1-3.4 0l-.6-.6c-1-1-1-2.5 0-3.4L15 5\"/><path d=\"m9 15 4-4\"/><path d=\"m5 19-3 3\"/><path d=\"m12 12 4.5 4.5\"/></svg>\n            {t.dosageLabel}\n          </h3>\n          <p className={multiLineDetailValueClass}>{medicine.dosage}</p>\n        </div>\n        <div>\n          <h3 className={detailItemClass + \" flex items-center\"}>\n            <AlertTriangle className=\"mr-2 h-4 w-4 text-primary\" /> {t.sideEffectsLabel}\n          </h3>\n          <p className={multiLineDetailValueClass}>{medicine.sideEffects}</p>\n        </div>\n        {medicine.barcode && (\n          <div>\n            <h3 className={detailItemClass + \" flex items-center\"}>\n              <Barcode className=\"mr-2 h-4 w-4 text-primary\" /> {t.barcodeLabel}\n            </h3>\n            <div className=\"flex items-center space-x-2\">\n              <Badge variant=\"secondary\" className=\"text-base font-mono\">\n                {medicine.barcode}\n              </Badge>\n            </div>\n          </div>\n        )}\n        {!medicine.barcode && (\n           <div>\n            <h3 className={detailItemClass + \" flex items-center\"}>\n             <Barcode className=\"mr-2 h-4 w-4 text-primary\" /> {t.barcodeLabel}\n            </h3>\n             <p className=\"text-sm text-muted-foreground italic\">{t.barcodeNotAvailable}</p>\n           </div>\n        )}\n      </CardContent>\n      {sourceMessage && (\n        <CardFooter className=\"text-xs text-muted-foreground italic pt-4 border-t\">\n          <Info className=\"mr-2 h-3 w-3\" />\n          {sourceMessage}\n        </CardFooter>\n      )}\n    </Card>\n  );\n}\n"],"names":[],"mappings":";;;;AAKA;AAQA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAbA;;;;;AAoBO,SAAS,aAAa,EAAE,QAAQ,EAAE,CAAC,EAAqB;IAC7D,MAAM,kBAAkB;IACxB,MAAM,mBAAmB;IACzB,MAAM,4BAA4B,GAAG,iBAAiB,oBAAoB,CAAC;IAE3E,IAAI,gBAAgB;IACpB,OAAQ,SAAS,MAAM;QACrB,KAAK;YACH,gBAAgB,EAAE,iBAAiB;YACnC;QACF,KAAK;YACH,gBAAgB,EAAE,mBAAmB;YACrC;QACF,KAAK;YACH,gBAAgB,EAAE,mBAAmB;YACrC;QACF,KAAK;YACH,gBAAgB,EAAE,oCAAoC,CAAC,SAAS,IAAI;YACpE;QACF,KAAK;YACH,gBAAgB,EAAE,+BAA+B,CAAC,SAAS,IAAI;YAC/D;QACF;YACE,IAAI,SAAS,IAAI,IAAI,SAAS,WAAW,IAAI,SAAS,KAAK,KAAK,EAAE,gBAAgB,EAAE;gBAClF,gBAAgB,EAAE,mBAAmB;YACvC;IACJ;IAGA,qBACE,8OAAC,gIAAA,CAAA,OAAI;QAAC,WAAU;;0BACd,8OAAC,gIAAA,CAAA,aAAU;;kCACT,8OAAC,gIAAA,CAAA,YAAS;wBAAC,WAAU;;0CACnB,8OAAC,kMAAA,CAAA,OAAI;gCAAC,WAAU;;;;;;0CAChB,8OAAC;gCAAK,WAAU;;oCACb,SAAS,IAAI;oCACb,CAAC,SAAS,EAAE,CAAC,UAAU,CAAC,wBACvB,8OAAC;wCAAK,WAAU;;4CAAiD;4CAAE,SAAS,EAAE;4CAAC;;;;;;;;;;;;;;;;;;;kCAIrF,8OAAC,gIAAA,CAAA,kBAAe;wBAAC,WAAU;kCACxB,EAAE,YAAY;;;;;;;;;;;;0BAGnB,8OAAC,gIAAA,CAAA,cAAW;gBAAC,WAAU;;kCACrB,8OAAC;;0CACC,8OAAC;gCAAG,WAAW,kBAAkB;;kDAC9B,8OAAC,wNAAA,CAAA,gBAAa;wCAAC,WAAU;;;;;;oCAA8B;oCAAE,EAAE,gBAAgB;;;;;;;0CAE9E,8OAAC;gCAAE,WAAW;0CAAmB,SAAS,WAAW;;;;;;;;;;;;oBAGtD,SAAS,GAAG,IAAI,QAAQ,SAAS,GAAG,KAAK,EAAE,gBAAgB,kBAC1D,8OAAC;;0CACC,8OAAC;gCAAG,WAAW,kBAAkB;;kDAC/B,8OAAC,oNAAA,CAAA,cAAW;wCAAC,WAAU;;;;;;oCAA8B;oCAAE,EAAE,QAAQ;;;;;;;0CAEnE,8OAAC;gCAAE,WAAW;;oCAAkB;oCAAE,SAAS,GAAG;;;;;;;;;;;;;oBAIjD,SAAS,GAAG,IAAI,SAAS,GAAG,KAAK,EAAE,gBAAgB,kBAClD,8OAAC;;0CACC,8OAAC;gCAAG,WAAW,kBAAkB;;kDAC/B,8OAAC,wMAAA,CAAA,UAAO;wCAAC,WAAU;;;;;;oCAA8B;oCAAE,EAAE,QAAQ;;;;;;;0CAE/D,8OAAC;gCAAE,WAAW;0CAAmB,SAAS,GAAG;;;;;;;;;;;;kCAIjD,8OAAC;;0CACC,8OAAC;gCAAG,WAAW,kBAAkB;;kDAC/B,8OAAC,gNAAA,CAAA,cAAW;wCAAC,WAAU;;;;;;oCAA8B;oCAAE,EAAE,UAAU;;;;;;;0CAErE,8OAAC;gCAAE,WAAW;0CAA4B,SAAS,KAAK;;;;;;;;;;;;kCAE1D,8OAAC;;0CACC,8OAAC;gCAAG,WAAW,kBAAkB;;kDAC/B,8OAAC,wMAAA,CAAA,UAAO;wCAAC,WAAU;;;;;;oCAA8B;oCAAE,EAAE,iBAAiB;;;;;;;0CAExE,8OAAC;gCAAE,WAAW;0CAA4B,SAAS,YAAY;;;;;;;;;;;;kCAEjE,8OAAC;;0CACC,8OAAC;gCAAG,WAAW,kBAAkB;;kDAChC,8OAAC;wCAAI,OAAM;wCAA6B,OAAM;wCAAK,QAAO;wCAAK,SAAQ;wCAAY,MAAK;wCAAO,QAAO;wCAAe,aAAY;wCAAI,eAAc;wCAAQ,gBAAe;wCAAQ,WAAU;;0DAA0C,8OAAC;gDAAK,GAAE;;;;;;0DAAa,8OAAC;gDAAK,GAAE;;;;;;0DAAa,8OAAC;gDAAK,GAAE;;;;;;0DAAgE,8OAAC;gDAAK,GAAE;;;;;;0DAAa,8OAAC;gDAAK,GAAE;;;;;;0DAAa,8OAAC;gDAAK,GAAE;;;;;;;;;;;;oCACxY,EAAE,WAAW;;;;;;;0CAEhB,8OAAC;gCAAE,WAAW;0CAA4B,SAAS,MAAM;;;;;;;;;;;;kCAE3D,8OAAC;;0CACC,8OAAC;gCAAG,WAAW,kBAAkB;;kDAC/B,8OAAC,wNAAA,CAAA,gBAAa;wCAAC,WAAU;;;;;;oCAA8B;oCAAE,EAAE,gBAAgB;;;;;;;0CAE7E,8OAAC;gCAAE,WAAW;0CAA4B,SAAS,WAAW;;;;;;;;;;;;oBAE/D,SAAS,OAAO,kBACf,8OAAC;;0CACC,8OAAC;gCAAG,WAAW,kBAAkB;;kDAC/B,8OAAC,wMAAA,CAAA,UAAO;wCAAC,WAAU;;;;;;oCAA8B;oCAAE,EAAE,YAAY;;;;;;;0CAEnE,8OAAC;gCAAI,WAAU;0CACb,cAAA,8OAAC,iIAAA,CAAA,QAAK;oCAAC,SAAQ;oCAAY,WAAU;8CAClC,SAAS,OAAO;;;;;;;;;;;;;;;;;oBAKxB,CAAC,SAAS,OAAO,kBACf,8OAAC;;0CACA,8OAAC;gCAAG,WAAW,kBAAkB;;kDAChC,8OAAC,wMAAA,CAAA,UAAO;wCAAC,WAAU;;;;;;oCAA8B;oCAAE,EAAE,YAAY;;;;;;;0CAEjE,8OAAC;gCAAE,WAAU;0CAAwC,EAAE,mBAAmB;;;;;;;;;;;;;;;;;;YAIhF,+BACC,8OAAC,gIAAA,CAAA,aAAU;gBAAC,WAAU;;kCACpB,8OAAC,kMAAA,CAAA,OAAI;wBAAC,WAAU;;;;;;oBACf;;;;;;;;;;;;;AAKX","debugId":null}},
    {"offset": {"line": 1686, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/alert.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AAEA;;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,6JACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;QACJ;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG3B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAO,EAAE,oBACnC,8OAAC;QACC,KAAK;QACL,MAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QACzC,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG;AAEpB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,gDAAgD;QAC7D,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,iCAAmB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,iBAAiB,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1750, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/medisearch-app.tsx"],"sourcesContent":["\n\"use client\";\n\nimport React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport Image from \"next/image\";\nimport type { Language, Medicine } from \"@/types\";\nimport { getTranslations, type TranslationKeys } from \"@/lib/translations\";\nimport { enhanceMedicineSearch, type EnhanceMedicineSearchOutput } from \"@/ai/flows/enhance-medicine-search\";\nimport { generateMedicineDetails } from \"@/ai/flows/generate-medicine-details\";\nimport { fetchMedicineByName, fetchSuggestions } from \"@/lib/mockApi\";\nimport { LanguageSelector } from \"@/components/medisearch/LanguageSelector\";\nimport { SearchBar } from \"@/components/medisearch/SearchBar\";\nimport { MedicineCard } from \"@/components/medisearch/MedicineCard\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Button } from \"@/components/ui/button\";\nimport { Loader2, AlertCircle, Info, RotateCcw, KeyRound, ServerCrash } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n\nexport default function MediSearchApp() {\n  const [selectedLanguage, setSelectedLanguage] = useState<Language>(\"en\");\n  const [t, setT] = useState<TranslationKeys>(getTranslations(\"en\"));\n  const [searchQuery, setSearchQuery] = useState<string>(\"\");\n  const [searchResults, setSearchResults] = useState<Medicine[] | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [aiConfigError, setAiConfigError] = useState<string | null>(null);\n  const [aiConfigErrorType, setAiConfigErrorType] = useState<'key_or_model' | 'api_fail' | null>(null);\n  const [loadingMessage, setLoadingMessage] = useState<string>(\"\");\n  const [searchAttempted, setSearchAttempted] = useState<boolean>(false);\n\n  const [suggestions, setSuggestions] = useState<string[]>([]);\n  const [showSuggestions, setShowSuggestions] = useState<boolean>(false);\n  const debounceTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  const { toast } = useToast();\n\n  useEffect(() => {\n    setT(getTranslations(selectedLanguage));\n    document.documentElement.lang = selectedLanguage;\n  }, [selectedLanguage]);\n\n  const handleLanguageChange = useCallback((lang: Language) => {\n    setSelectedLanguage(lang);\n  }, []);\n\n  const handleClearSearch = useCallback(() => {\n    setSearchQuery(\"\");\n    setSearchResults(null);\n    setError(null);\n    setAiConfigError(null);\n    setAiConfigErrorType(null);\n    setSearchAttempted(false);\n    setSuggestions([]);\n    setShowSuggestions(false);\n  }, []);\n\n  const performSearchLogic = async (termToSearch: string) => {\n    if (!termToSearch.trim()) {\n      handleClearSearch();\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n    setAiConfigError(null);\n    setAiConfigErrorType(null);\n    setSearchResults(null);\n    setSearchAttempted(true);\n    setShowSuggestions(false);\n    let aiEnhancedSearchTerm = termToSearch.trim();\n    let aiEnhancementSource: EnhanceMedicineSearchOutput['source'] = 'original_query_used';\n\n\n    try {\n      setLoadingMessage(t.loadingAi);\n      const aiEnhanceResponse = await enhanceMedicineSearch({ query: termToSearch });\n      aiEnhancementSource = aiEnhanceResponse.source || 'ai_failed';\n\n      if (aiEnhanceResponse && aiEnhanceResponse.correctedMedicineName && aiEnhanceResponse.correctedMedicineName.trim() !== '') {\n        aiEnhancedSearchTerm = aiEnhanceResponse.correctedMedicineName.trim();\n        if (aiEnhanceResponse.source === 'ai_enhanced') {\n          toast({\n            title: t.appName,\n            description: t.searchWithAiResult(aiEnhancedSearchTerm),\n            action: <Info className=\"h-5 w-5 text-primary\" />,\n          });\n        } else if (aiEnhanceResponse.source === 'original_query_used') {\n           toast({ title: t.appName, description: t.errorAiEnhancementSkipped, variant: \"default\" });\n        } else if (aiEnhanceResponse.source === 'ai_unavailable') {\n            setAiConfigError(t.errorAiNotConfiguredOrModel);\n            setAiConfigErrorType('key_or_model');\n            toast({ title: t.appName, description: t.errorAiNotConfiguredOrModel, variant: \"destructive\" });\n        } else {\n           toast({ title: t.appName, description: t.errorAi, variant: \"destructive\" });\n           setAiConfigError(t.errorAiFailed);\n           setAiConfigErrorType('api_fail');\n        }\n      } else {\n        toast({ title: t.appName, description: t.errorAi, variant: \"destructive\" });\n        aiEnhancedSearchTerm = termToSearch.trim();\n        aiEnhancementSource = 'ai_failed';\n        setAiConfigError(t.errorAiFailed);\n        setAiConfigErrorType('api_fail');\n      }\n    } catch (aiError: any) {\n      let message = t.errorAi;\n      let toastVariant: \"default\" | \"destructive\" = \"destructive\";\n\n      console.error(`[MediSearchApp] AI enhancement critical failure. Query: \"${termToSearch}\"`);\n      console.error(`[MediSearchApp] Error Message: ${aiError?.message || 'No message'}`);\n      console.error(`[MediSearchApp] Error Stack: ${aiError?.stack || 'No stack'}`);\n      console.error(`[MediSearchApp] Full Error Object:`, aiError);\n\n\n      if (aiError?.message) {\n          if (aiError.message.includes('API key not valid') || aiError.message.includes('API_KEY_INVALID') || aiError.message.includes('User location is not supported') || aiError.message.includes('permission') || aiError.message.includes('denied') || aiError.message.includes('model not found') || aiError.message.includes('Could not find model') || aiError.message.includes('404 Not Found') || aiError.message.includes('gemini-1.5-flash-latest') || aiError.message.includes('gemini-pro') ) {\n              message = t.errorAiNotConfiguredOrModel;\n              setAiConfigError(t.errorAiNotConfiguredOrModel);\n              setAiConfigErrorType('key_or_model');\n          } else if (aiError.message.includes('server error') || aiError.message.includes('internal error') || aiError.message.includes('flow execution failed')) {\n              message = t.errorAiFailed;\n              setAiConfigError(t.errorAiFailed);\n              setAiConfigErrorType('api_fail');\n          } else {\n             message = `${t.errorAi} Details: ${aiError.message}`;\n             if (!aiConfigErrorType) {\n                setAiConfigError(message);\n                setAiConfigErrorType('api_fail');\n             }\n          }\n      } else {\n         if (!aiConfigErrorType) {\n            setAiConfigError(message);\n            setAiConfigErrorType('api_fail');\n         }\n      }\n\n      toast({\n        title: t.appName,\n        description: message,\n        variant: toastVariant,\n      });\n      aiEnhancedSearchTerm = termToSearch.trim();\n      aiEnhancementSource = 'ai_failed';\n    }\n\n    setLoadingMessage(t.loadingData);\n\n    try {\n      const dbDataArray = await fetchMedicineByName(aiEnhancedSearchTerm);\n      let processedMedicines: Medicine[] = [];\n\n      if (dbDataArray.length > 0) {\n        setLoadingMessage(t.loadingAiDetails);\n\n        processedMedicines = await Promise.all(\n          dbDataArray.map(async (dbItem) => {\n            try {\n                const aiDetails = await generateMedicineDetails({\n                searchTermOrName: dbItem.name,\n                language: selectedLanguage,\n                contextName: dbItem.name,\n                contextComposition: dbItem.composition,\n                contextBarcode: dbItem.barcode,\n                contextMrp: dbItem.mrp,\n                contextUom: dbItem.uom,\n                });\n\n                if (aiDetails.source === 'ai_failed' || aiDetails.source === 'ai_unavailable') {\n                    toast({\n                        title: t.appName,\n                        description: t.errorAiDetails(dbItem.name, aiDetails.source),\n                        variant: \"destructive\",\n                    });\n                     if (aiDetails.source === 'ai_unavailable' && !aiConfigError) {\n                        setAiConfigError(t.errorAiNotConfiguredOrModelForDetails(dbItem.name));\n                        setAiConfigErrorType('key_or_model');\n                    } else if (aiDetails.source === 'ai_failed' && !aiConfigError) {\n                        setAiConfigError(t.errorAiFailedForDetails(dbItem.name));\n                        setAiConfigErrorType('api_fail');\n                    }\n                } else if (aiDetails.source === 'database_only' && (aiDetails.usage === t.infoNotAvailable || aiDetails.manufacturer === t.infoNotAvailable)){\n                     toast({\n                        title: t.appName,\n                        description: t.aiCouldNotEnhance(dbItem.name),\n                        variant: \"default\",\n                    });\n                }\n\n                return {\n                id: dbItem.id,\n                ...aiDetails\n                };\n            } catch (genDetailsError: any) {\n                console.error(`[MediSearchApp] Critical error during generateMedicineDetails promise for ${dbItem.name}:`, genDetailsError.message, genDetailsError.stack, genDetailsError);\n                 toast({\n                    title: t.appName,\n                    description: t.errorAiDetailsCritical(dbItem.name),\n                    variant: \"destructive\",\n                });\n                if (!aiConfigError) { // Prioritize Key/Model error if not already set\n                    if(genDetailsError?.message?.toLowerCase().includes('api key') || genDetailsError?.message?.toLowerCase().includes('model not found')) {\n                        setAiConfigError(t.errorAiNotConfiguredOrModelForDetails(dbItem.name));\n                        setAiConfigErrorType('key_or_model');\n                    } else {\n                        setAiConfigError(t.errorAiDetailsCritical(dbItem.name));\n                        setAiConfigErrorType('api_fail');\n                    }\n                }\n                return {\n                    id: dbItem.id,\n                    name: dbItem.name,\n                    composition: dbItem.composition,\n                    barcode: dbItem.barcode,\n                    mrp: dbItem.mrp,\n                    uom: dbItem.uom,\n                    usage: t.infoNotAvailable,\n                    manufacturer: t.infoNotAvailable,\n                    dosage: t.infoNotAvailable,\n                    sideEffects: t.infoNotAvailable,\n                    source: 'ai_failed'\n                };\n            }\n          })\n        );\n      } else if (aiEnhancementSource === 'ai_enhanced' || aiEnhancementSource === 'original_query_used') {\n          setLoadingMessage(t.loadingAiDetails);\n          try {\n            const aiOnlyDetails = await generateMedicineDetails({\n                searchTermOrName: aiEnhancedSearchTerm,\n                language: selectedLanguage,\n            });\n             if (aiOnlyDetails.name && aiOnlyDetails.name !== t.infoNotAvailable && aiOnlyDetails.composition !== t.infoNotAvailable ) {\n                 processedMedicines = [{ id: `ai-${Date.now()}`, ...aiOnlyDetails }];\n             } else {\n                 processedMedicines = [];\n             }\n\n            if (aiOnlyDetails.source === 'ai_failed' || aiOnlyDetails.source === 'ai_unavailable') {\n                 toast({\n                    title: t.appName,\n                    description: t.errorAiDetails(aiEnhancedSearchTerm, aiOnlyDetails.source),\n                    variant: \"destructive\",\n                });\n                 if (aiOnlyDetails.source === 'ai_unavailable' && !aiConfigError) {\n                    setAiConfigError(t.errorAiNotConfiguredOrModelForDetails(aiEnhancedSearchTerm));\n                    setAiConfigErrorType('key_or_model');\n                } else if (aiOnlyDetails.source === 'ai_failed' && !aiConfigError) {\n                    setAiConfigError(t.errorAiFailedForDetails(aiEnhancedSearchTerm));\n                    setAiConfigErrorType('api_fail');\n                }\n            }\n          } catch (aiOnlyGenError: any) {\n            console.error(`[MediSearchApp] Critical error during AI-only generateMedicineDetails for \"${aiEnhancedSearchTerm}\":`, aiOnlyGenError.message, aiOnlyGenError.stack, aiOnlyGenError);\n             toast({\n                title: t.appName,\n                description: t.errorAiDetailsCritical(aiEnhancedSearchTerm),\n                variant: \"destructive\",\n            });\n            if (!aiConfigError) { // Prioritize Key/Model error\n                 if(aiOnlyGenError?.message?.toLowerCase().includes('api key') || aiOnlyGenError?.message?.toLowerCase().includes('model not found')) {\n                    setAiConfigError(t.errorAiNotConfiguredOrModelForDetails(aiEnhancedSearchTerm));\n                    setAiConfigErrorType('key_or_model');\n                 } else {\n                    setAiConfigError(t.errorAiDetailsCritical(aiEnhancedSearchTerm));\n                    setAiConfigErrorType('api_fail');\n                 }\n            }\n          }\n      }\n\n      setSearchResults(processedMedicines);\n\n      if (aiEnhancementSource === 'ai_unavailable' && !aiConfigError) {\n        setAiConfigError(t.errorAiNotConfiguredOrModel);\n        setAiConfigErrorType('key_or_model');\n      } else if (aiEnhancementSource === 'ai_failed' && !aiConfigError) {\n        setAiConfigError(t.errorAiFailed);\n        setAiConfigErrorType('api_fail');\n      }\n\n    } catch (dataProcessingError: any) {\n      let errorMessage = t.errorData;\n      if (dataProcessingError?.message) {\n        errorMessage = `${t.errorData} Details: ${dataProcessingError.message}`;\n      }\n      console.error(`[MediSearchApp] Data processing failed. Query: \"${aiEnhancedSearchTerm}\", Error: ${dataProcessingError.message || dataProcessingError}`, dataProcessingError);\n      setError(errorMessage);\n      toast({ title: t.appName, description: errorMessage, variant: \"destructive\" });\n    } finally {\n      setIsLoading(false);\n      setLoadingMessage(\"\");\n    }\n  };\n\n  const handleSearchSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    await performSearchLogic(searchQuery);\n  };\n\n  const handleSuggestionClick = async (suggestion: string) => {\n    setSearchQuery(suggestion);\n    setShowSuggestions(false);\n    await performSearchLogic(suggestion);\n  };\n\n  const handleSearchQueryChange = (query: string) => {\n    setSearchQuery(query);\n    if (debounceTimeoutRef.current) {\n      clearTimeout(debounceTimeoutRef.current);\n    }\n    if (query.length > 1) {\n      debounceTimeoutRef.current = setTimeout(async () => {\n        try {\n            const fetchedSuggestions = await fetchSuggestions(query);\n            setSuggestions(fetchedSuggestions);\n            setShowSuggestions(fetchedSuggestions.length > 0);\n        } catch (e) {\n            console.error(\"[MediSearchApp] Failed to fetch suggestions:\", e);\n            setSuggestions([]);\n            setShowSuggestions(false);\n        }\n      }, 300);\n    } else {\n      setSuggestions([]);\n      setShowSuggestions(false);\n    }\n  };\n\n  const handleInputFocus = () => {\n    if (searchQuery.length > 1 && suggestions.length > 0) {\n      setShowSuggestions(true);\n    }\n  };\n\n  const handleInputBlur = () => {\n    setTimeout(() => {\n      setShowSuggestions(false);\n    }, 150);\n  };\n\n\n  return (\n    <div className=\"flex flex-col items-center min-h-screen bg-background\">\n      <header className=\"w-full p-4 flex justify-end sticky top-0 z-50 bg-background/80 backdrop-blur-sm\">\n        <LanguageSelector\n          selectedLanguage={selectedLanguage}\n          onLanguageChange={handleLanguageChange}\n          t={t}\n        />\n      </header>\n\n      <main className=\"w-full flex flex-col items-center space-y-6 px-4 pb-8 pt-2 sm:pt-6\">\n        <div className=\"flex items-center justify-center mb-2\">\n             <Image\n                src=\"/images/logo_transparent.png\"\n                alt=\"WellMeds Logo\"\n                width={320}\n                height={320}\n                priority\n                className=\"object-contain\"\n                data-ai-hint=\"logo health\"\n            />\n        </div>\n\n        <section className=\"w-full max-w-lg p-6 bg-card rounded-xl shadow-2xl\">\n          <h2 className=\"text-2xl font-semibold text-center mb-6 text-foreground\">{t.searchTitle}</h2>\n          <SearchBar\n            searchQuery={searchQuery}\n            onSearchQueryChange={handleSearchQueryChange}\n            onSubmit={handleSearchSubmit}\n            isLoading={isLoading}\n            t={t}\n            suggestions={suggestions}\n            showSuggestions={showSuggestions}\n            onSuggestionClick={handleSuggestionClick}\n            onInputFocus={handleInputFocus}\n            onInputBlur={handleInputBlur}\n          />\n        </section>\n\n        {aiConfigError && !isLoading && (\n          <Alert variant=\"destructive\" className=\"w-full max-w-lg shadow-md\">\n            {aiConfigErrorType === 'key_or_model' ? <KeyRound className=\"h-5 w-5\" /> : <ServerCrash className=\"h-5 w-5\" />}\n            <AlertTitle>{aiConfigErrorType === 'key_or_model' ? t.errorAiNotConfiguredOrModelTitle : t.errorAiFailedTitle}</AlertTitle>\n            <AlertDescription>\n              {aiConfigError}\n              {aiConfigErrorType === 'key_or_model' && (\n                <p className=\"mt-2 text-xs\">\n                  {t.errorAiNotConfiguredOrModelDetail}\n                </p>\n              )}\n               {aiConfigErrorType === 'api_fail' && (\n                <p className=\"mt-2 text-xs\">\n                 {t.errorAiFailedDetail}\n                </p>\n              )}\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {searchAttempted && !isLoading && (\n          <Button variant=\"outline\" onClick={handleClearSearch} className=\"self-center shadow-sm hover:shadow-md transition-shadow\">\n            <RotateCcw className=\"mr-2 h-4 w-4\" />\n            {t.clearSearchButton}\n          </Button>\n        )}\n\n        {isLoading && (\n          <div className=\"flex flex-col items-center space-y-2 p-4 text-foreground\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n            <p className=\"text-lg\">{loadingMessage || t.loadingData}</p>\n          </div>\n        )}\n\n        {error && !isLoading && (\n          <Alert variant=\"destructive\" className=\"w-full max-w-lg shadow-md\">\n            <AlertCircle className=\"h-5 w-5\" />\n            <AlertTitle>{t.errorOccurred}</AlertTitle>\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        {!isLoading && !error && searchResults && searchResults.length > 0 && (\n          <section className=\"w-full mt-0 animate-fadeIn space-y-6 flex flex-col items-center\">\n            {searchResults.map(medicine => (\n              <MedicineCard key={medicine.id} medicine={medicine} t={t} />\n            ))}\n          </section>\n        )}\n\n        {!isLoading && !error && searchResults && searchResults.length === 0 && searchAttempted && !aiConfigError && (\n            <Alert className=\"w-full max-w-lg shadow-md\">\n                <Info className=\"h-5 w-5\" />\n                <AlertTitle>{t.noResultsTitle}</AlertTitle>\n                <AlertDescription>{t.noResults}</AlertDescription>\n            </Alert>\n        )}\n\n\n        {!isLoading && !searchAttempted && !aiConfigError && (\n            <div className=\"text-center p-4 text-muted-foreground\">\n                {t.initialHelperText}\n            </div>\n        )}\n\n      </main>\n\n      <footer className=\"mt-auto pt-8 pb-4 text-center text-sm text-muted-foreground\">\n        <p>&copy; {new Date().getFullYear()} {t.appName}. {t.allRightsReserved}</p>\n      </footer>\n       <style jsx global>{`\n        .animate-fadeIn {\n          animation: fadeIn 0.5s ease-in-out;\n        }\n        @keyframes fadeIn {\n          from { opacity: 0; transform: translateY(10px); }\n          to { opacity: 1; transform: translateY(0); }\n        }\n      `}</style>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}